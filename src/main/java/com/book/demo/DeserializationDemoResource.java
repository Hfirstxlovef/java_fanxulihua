package com.book.demo;

import com.book.demo.framework.spring.SpringDeserializationDemo;
import com.book.demo.jvm.JVMExecutionVisualizer;
import com.book.demo.trace.TraceableObjectInputStream;
import com.book.demo.components.ServletDeserializationTracer;
import com.book.demo.components.FilterDeserializationTracer;
import com.book.demo.components.ListenerDeserializationTracer;
import com.book.demo.memshell.*;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import java.io.*;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Path("/demo")
public class DeserializationDemoResource {
    
    @GET
    @Path("/")
    @Produces(MediaType.TEXT_HTML)
    public Response getDemoHomePage() {
        String html = generateDemoHomePage();
        return Response.ok(html).build();
    }
    
    @GET
    @Path("/trace/{type}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response runTraceDemo(@PathParam("type") String type) {
        try {
            switch (type.toLowerCase()) {
                case "basic":
                    return Response.ok(runBasicTraceDemo()).build();
                case "dangerous":
                    return Response.ok(runEducationalDeserializationDemo("dangerous")).build();
                case "gadget":
                    return Response.ok(runEducationalDeserializationDemo("gadget")).build();
                case "dos":
                    return Response.ok(runEducationalDeserializationDemo("dos")).build();
                case "spring":
                    return Response.ok(runSpringDemo()).build();
                case "spring-bean":
                    return Response.ok(runSpringDemo("bean-lifecycle")).build();
                case "spring-aop":
                    return Response.ok(runSpringDemo("aop-proxy")).build();
                case "spring-security":
                    return Response.ok(runSpringDemo("security-context")).build();
                case "jvm":
                    return Response.ok(runJVMVisualizationDemo()).build();
                case "jvm-memory":
                    return Response.ok(runJVMVisualizationDemo("memory-analysis")).build();
                case "jvm-bytecode":
                    return Response.ok(runJVMVisualizationDemo("bytecode-trace")).build();
                case "jvm-reflection":
                    return Response.ok(runJVMVisualizationDemo("reflection-chain")).build();
                case "jvm-performance":
                    return Response.ok(runJVMVisualizationDemo("performance-analysis")).build();
                case "servlet":
                    return Response.ok(runServletTraceDemo()).build();
                case "filter":
                    return Response.ok(runFilterTraceDemo()).build();
                case "listener":
                    return Response.ok(runListenerTraceDemo()).build();
                case "components":
                    return Response.ok(runAllComponentsTraceDemo()).build();
                default:
                    return Response.status(400).entity("{\"error\":\"Êú™Áü•ÁöÑÊºîÁ§∫Á±ªÂûã\"}").build();
            }
        } catch (Exception e) {
            return Response.status(500).entity("{\"error\":\"" + e.getMessage() + "\"}").build();
        }
    }
    
    @GET
    @Path("/visualization/{type}")
    @Produces(MediaType.TEXT_HTML + "; charset=UTF-8")
    public Response getVisualization(@PathParam("type") String type) {
        try {
            String htmlContent;
            switch (type.toLowerCase()) {
                case "spring":
                    htmlContent = generateSpringVisualizationHTML();
                    break;
                case "jvm":
                    htmlContent = generateJVMVisualizationHTML();
                    break;
                default:
                    htmlContent = "<h1>Êú™Áü•ÁöÑÂèØËßÜÂåñÁ±ªÂûã</h1>";
                    break;
            }
            return Response.ok(htmlContent)
                    .type(MediaType.TEXT_HTML + "; charset=UTF-8")
                    .build();
        } catch (Exception e) {
            return Response.status(500)
                    .entity("<h1>ÁîüÊàêÂèØËßÜÂåñÂ§±Ë¥•: " + e.getMessage() + "</h1>")
                    .type(MediaType.TEXT_HTML + "; charset=UTF-8")
                    .build();
        }
    }
    
    @GET
    @Path("/listener-shell")
    @Produces(MediaType.TEXT_HTML + "; charset=UTF-8")
    public Response getListenerShell(@QueryParam("action") String action) {
        String htmlContent = generateListenerShellHTML(action);
        return Response.ok(htmlContent)
                .type(MediaType.TEXT_HTML + "; charset=UTF-8")
                .build();
    }
    
    @POST
    @Path("/listener-cmd")
    @Produces(MediaType.APPLICATION_JSON)
    public Response executeListenerCommand(@QueryParam("cmd") String cmd) {
        try {
            if (cmd == null || cmd.trim().isEmpty()) {
                return Response.ok("{\"status\":\"error\",\"message\":\"ÂëΩ‰ª§‰∏çËÉΩ‰∏∫Á©∫\"}").build();
            }
            
            // ÂÆâÂÖ®Ê£ÄÊü• - ‰ªÖÂÖÅËÆ∏ÁâπÂÆöÁöÑÊºîÁ§∫ÂëΩ‰ª§
            if (!isAllowedCommand(cmd)) {
                return Response.ok("{\"status\":\"error\",\"message\":\"‰∏çÂÖÅËÆ∏ÊâßË°åËØ•ÂëΩ‰ª§Ôºà‰ªÖÈôêÊºîÁ§∫Áî®ÂëΩ‰ª§Ôºâ\"}").build();
            }
            
            String result = executeCommand(cmd);
            return Response.ok("{\"status\":\"success\",\"result\":\"" + escapeJson(result) + "\"}").build();
            
        } catch (Exception e) {
            return Response.ok("{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\"}").build();
        }
    }
    
    @GET
    @Path("/shell")
    @Produces(MediaType.TEXT_HTML + "; charset=UTF-8")
    public Response getShellDemo(@QueryParam("action") String action, @QueryParam("type") String type) {
        if ("info".equals(action) && type != null) {
            String html = generateShellDemoHTML(type);
            return Response.ok(html)
                    .type(MediaType.TEXT_HTML + "; charset=UTF-8")
                    .build();
        }
        
        return Response.ok("<h1>Shell Demo</h1><p>Invalid parameters</p>")
                .type(MediaType.TEXT_HTML + "; charset=UTF-8")
                .build();
    }
    
    private String generateShellDemoHTML(String type) {
        String title = type.substring(0, 1).toUpperCase() + type.substring(1) + " ÂÜÖÂ≠òÈ©¨ÊºîÁ§∫";
        String icon = "servlet".equals(type) ? "üîç" : "filter".equals(type) ? "üîÑ" : "üëÇ";
        
        return "<!DOCTYPE html>\n" +
            "<html>\n" +
            "<head>\n" +
            "    <meta charset=\"UTF-8\">\n" +
            "    <title>" + title + "</title>\n" +
            "    <style>\n" +
            "        body {\n" +
            "            font-family: 'Microsoft YaHei', Arial, sans-serif;\n" +
            "            margin: 0;\n" +
            "            padding: 20px;\n" +
            "            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n" +
            "            min-height: 100vh;\n" +
            "            color: #333;\n" +
            "        }\n" +
            "        \n" +
            "        .container {\n" +
            "            max-width: 1000px;\n" +
            "            margin: 0 auto;\n" +
            "            background: white;\n" +
            "            border-radius: 15px;\n" +
            "            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n" +
            "            padding: 30px;\n" +
            "        }\n" +
            "        \n" +
            "        .header {\n" +
            "            text-align: center;\n" +
            "            margin-bottom: 30px;\n" +
            "            padding-bottom: 20px;\n" +
            "            border-bottom: 2px solid #f0f0f0;\n" +
            "        }\n" +
            "        \n" +
            "        .header h1 {\n" +
            "            color: #2c3e50;\n" +
            "            margin: 0;\n" +
            "            font-size: 2.5em;\n" +
            "        }\n" +
            "        \n" +
            "        .warning {\n" +
            "            background: #fff3cd;\n" +
            "            border: 1px solid #ffeaa7;\n" +
            "            border-radius: 8px;\n" +
            "            padding: 15px;\n" +
            "            margin: 20px 0;\n" +
            "            color: #856404;\n" +
            "        }\n" +
            "        \n" +
            "        .info-section {\n" +
            "            background: #f8f9fa;\n" +
            "            border-radius: 8px;\n" +
            "            padding: 20px;\n" +
            "            margin: 20px 0;\n" +
            "        }\n" +
            "        \n" +
            "        .demo-section {\n" +
            "            background: #e8f5e8;\n" +
            "            border: 1px solid #28a745;\n" +
            "            border-radius: 8px;\n" +
            "            padding: 20px;\n" +
            "            margin: 20px 0;\n" +
            "        }\n" +
            "        \n" +
            "        .command-input {\n" +
            "            width: 100%;\n" +
            "            padding: 10px;\n" +
            "            border: 1px solid #ddd;\n" +
            "            border-radius: 5px;\n" +
            "            font-family: monospace;\n" +
            "            margin: 10px 0;\n" +
            "        }\n" +
            "        \n" +
            "        .btn {\n" +
            "            background: #007bff;\n" +
            "            color: white;\n" +
            "            border: none;\n" +
            "            padding: 10px 20px;\n" +
            "            border-radius: 5px;\n" +
            "            cursor: pointer;\n" +
            "            margin: 5px;\n" +
            "        }\n" +
            "        \n" +
            "        .btn:hover {\n" +
            "            background: #0056b3;\n" +
            "        }\n" +
            "        \n" +
            "        .output {\n" +
            "            background: #1e1e1e;\n" +
            "            color: #00ff00;\n" +
            "            padding: 15px;\n" +
            "            border-radius: 5px;\n" +
            "            font-family: monospace;\n" +
            "            margin: 10px 0;\n" +
            "            min-height: 100px;\n" +
            "            white-space: pre-wrap;\n" +
            "        }\n" +
            "        \n" +
            "        .feature-list {\n" +
            "            list-style-type: none;\n" +
            "            padding: 0;\n" +
            "        }\n" +
            "        \n" +
            "        .feature-list li {\n" +
            "            padding: 8px 0;\n" +
            "            border-bottom: 1px solid #eee;\n" +
            "        }\n" +
            "        \n" +
            "        .feature-list li:before {\n" +
            "            content: \"‚úì \";\n" +
            "            color: #28a745;\n" +
            "            font-weight: bold;\n" +
            "        }\n" +
            "    </style>\n" +
            "</head>\n" +
            "<body>\n" +
            "    <div class=\"container\">\n" +
            "        <div class=\"header\">\n" +
            "            <h1>" + icon + " " + title + "</h1>\n" +
            "            <p>ÂÜÖÂ≠òÈ©¨ÊäÄÊúØÊºîÁ§∫‰∏éÊïôËÇ≤Âπ≥Âè∞</p>\n" +
            "        </div>\n" +
            "        \n" +
            "        <div class=\"warning\">\n" +
            "            <h3>‚ö†Ô∏è ÂÆâÂÖ®Ë≠¶Âëä</h3>\n" +
            "            <p>Ê≠§ÊºîÁ§∫‰ªÖÁî®‰∫éÊïôËÇ≤ÁõÆÁöÑÔºåÂ±ïÁ§∫" + type + "ÂÜÖÂ≠òÈ©¨ÁöÑÂ∑•‰ΩúÂéüÁêÜÂíåÊ£ÄÊµãÊñπÊ≥ï„ÄÇËØ∑ÂãøÁî®‰∫éÊÅ∂ÊÑèÁî®ÈÄî„ÄÇ</p>\n" +
            "        </div>\n" +
            "        \n" +
            "        <div class=\"info-section\">\n" +
            "            <h3>üìã " + type.substring(0, 1).toUpperCase() + type.substring(1) + "ÂÜÖÂ≠òÈ©¨ÁÆÄ‰ªã</h3>\n" +
            "            <p>" + getShellDescription(type) + "</p>\n" +
            "            \n" +
            "            <h4>üîß ÊäÄÊúØÁâπÂæÅ:</h4>\n" +
            "            <ul class=\"feature-list\">\n" +
            "                " + getShellFeatures(type) + "\n" +
            "            </ul>\n" +
            "        </div>\n" +
            "        \n" +
            "        <div class=\"demo-section\">\n" +
            "            <h3>üíª ÂëΩ‰ª§ÊâßË°åÊºîÁ§∫</h3>\n" +
            "            <p>ËæìÂÖ•ÊºîÁ§∫ÂëΩ‰ª§Êü•ÁúãÂÜÖÂ≠òÈ©¨ÁöÑÊâßË°åÊïàÊûúÔºö</p>\n" +
            "            \n" +
            "            <input type=\"text\" id=\"cmdInput\" class=\"command-input\" placeholder=\"ËæìÂÖ•ÂëΩ‰ª§ (Â¶Ç: whoami, pwd, ls)\" value=\"whoami\">\n" +
            "            <br>\n" +
            "            <button class=\"btn\" onclick=\"executeDemo()\">ÊâßË°åÊºîÁ§∫ÂëΩ‰ª§</button>\n" +
            "            <button class=\"btn\" onclick=\"showInfo()\">ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ</button>\n" +
            "            <button class=\"btn\" onclick=\"clearOutput()\">Ê∏ÖÁ©∫ËæìÂá∫</button>\n" +
            "            \n" +
            "            <div class=\"output\" id=\"output\">Á≠âÂæÖÂëΩ‰ª§ÊâßË°å...</div>\n" +
            "        </div>\n" +
            "        \n" +
            "        <div class=\"info-section\">\n" +
            "            <h3>üõ°Ô∏è Ê£ÄÊµã‰∏éÈò≤Êä§Âª∫ËÆÆ</h3>\n" +
            "            <ul class=\"feature-list\">\n" +
            "                <li>ÂÆöÊúüÊ£ÄÊü•ÂºÇÂ∏∏ÁöÑServlet/FilterÊ≥®ÂÜå</li>\n" +
            "                <li>ÁõëÊéßÁ≥ªÁªü‰∏≠Âä®ÊÄÅÂä†ËΩΩÁöÑÁ±ª</li>\n" +
            "                <li>‰ΩøÁî®‰∏ì‰∏öÁöÑÂÜÖÂ≠òÈ©¨Ê£ÄÊµãÂ∑•ÂÖ∑</li>\n" +
            "                <li>Âä†Âº∫Â∫îÁî®Á®ãÂ∫èÁöÑËæìÂÖ•È™åËØÅ</li>\n" +
            "                <li>ÂÆûÊñΩ‰∏•Ê†ºÁöÑËÆøÈóÆÊéßÂà∂Á≠ñÁï•</li>\n" +
            "            </ul>\n" +
            "        </div>\n" +
            "    </div>\n" +
            "    \n" +
            "    <script>\n" +
            "        function executeDemo() {\n" +
            "            const cmd = document.getElementById('cmdInput').value;\n" +
            "            const output = document.getElementById('output');\n" +
            "            \n" +
            "            if (!cmd.trim()) {\n" +
            "                output.textContent = 'ËØ∑ËæìÂÖ•ÊúâÊïàÂëΩ‰ª§';\n" +
            "                return;\n" +
            "            }\n" +
            "            \n" +
            "            output.textContent = 'Ê≠£Âú®ÊâßË°åÂëΩ‰ª§: ' + cmd + '\\n';\n" +
            "            \n" +
            "            // Ê®°ÊãüÂëΩ‰ª§ÊâßË°å\n" +
            "            fetch('/api/demo/listener-cmd?cmd=' + encodeURIComponent(cmd))\n" +
            "                .then(response => response.json())\n" +
            "                .then(data => {\n" +
            "                    if (data.status === 'success') {\n" +
            "                        output.textContent += 'ÊâßË°åÁªìÊûú:\\n' + data.result;\n" +
            "                    } else {\n" +
            "                        output.textContent += 'ÊâßË°åÂ§±Ë¥•: ' + data.message;\n" +
            "                    }\n" +
            "                })\n" +
            "                .catch(error => {\n" +
            "                    output.textContent += 'ËØ∑Ê±ÇÂ§±Ë¥•: ' + error.message;\n" +
            "                });\n" +
            "        }\n" +
            "        \n" +
            "        function showInfo() {\n" +
            "            const output = document.getElementById('output');\n" +
            "            const info = `" + type.substring(0, 1).toUpperCase() + type.substring(1) + "ÂÜÖÂ≠òÈ©¨ÊºîÁ§∫‰ø°ÊÅØ:\n" +
            "            \n" +
            "Á±ªÂûã: " + type.toUpperCase() + " Memory Shell\n" +
            "Áä∂ÊÄÅ: ÊºîÁ§∫Ê®°Âºè\n" +
            "URLÊ®°Âºè: " + getUrlPattern(type) + "\n" +
            "ÂàõÂª∫Êó∂Èó¥: " + new Date().toLocaleString() + "\n" +
            "ÂÆâÂÖ®Á∫ßÂà´: ÊïôËÇ≤ÊºîÁ§∫ÔºàÂèóÈôêÂà∂Ôºâ\n" +
            "\n" +
            "Ê≥®ÊÑè: Ê≠§‰∏∫ÊºîÁ§∫ÁéØÂ¢ÉÔºåÂëΩ‰ª§ÊâßË°åÂèóÂà∞‰∏•Ê†ºÈôêÂà∂„ÄÇ`;\n" +
            "            \n" +
            "            output.textContent = info;\n" +
            "        }\n" +
            "        \n" +
            "        function clearOutput() {\n" +
            "            document.getElementById('output').textContent = 'Á≠âÂæÖÂëΩ‰ª§ÊâßË°å...';\n" +
            "        }\n" +
            "        \n" +
            "        // È°µÈù¢Âä†ËΩΩÊó∂ÊòæÁ§∫Âü∫Êú¨‰ø°ÊÅØ\n" +
            "        window.onload = function() {\n" +
            "            showInfo();\n" +
            "        };\n" +
            "    </script>\n" +
            "</body>\n" +
            "</html>";
    }
    
    private String getShellDescription(String type) {
        return switch (type) {
            case "servlet" -> "ServletÂÜÖÂ≠òÈ©¨ÈÄöËøáÂä®ÊÄÅÊ≥®ÂÜåServletÁªÑ‰ª∂ÂÆûÁé∞ÊåÅ‰πÖÂåñËÆøÈóÆÔºåÊîªÂáªËÄÖÂèØ‰ª•ÈÄöËøáÁâπÂÆöURLÊâßË°å‰ªªÊÑèÂëΩ‰ª§„ÄÇ";
            case "filter" -> "FilterÂÜÖÂ≠òÈ©¨ÈÄöËøáÊ≥®ÂÜåËøáÊª§Âô®Êù•Êã¶Êà™HTTPËØ∑Ê±ÇÔºåÂú®ËØ∑Ê±ÇÂ§ÑÁêÜËøáÁ®ã‰∏≠ÊâßË°åÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂÖ∑ÊúâÊõ¥Âº∫ÁöÑÈöêËîΩÊÄß„ÄÇ";
            default -> "ÂÜÖÂ≠òÈ©¨ÊòØ‰∏ÄÁßçÊó†Êñá‰ª∂ÁöÑÊåÅ‰πÖÂåñÊäÄÊúØÔºåÈÄöËøáÂú®Â∫îÁî®Á®ãÂ∫èÂÜÖÂ≠ò‰∏≠Ê§çÂÖ•ÊÅ∂ÊÑè‰ª£Á†ÅÊù•Áª¥ÊåÅËÆøÈóÆÊùÉÈôê„ÄÇ";
        };
    }
    
    private String getShellFeatures(String type) {
        return switch (type) {
            case "servlet" -> 
                "<li>Âä®ÊÄÅÊ≥®ÂÜåServletÁªÑ‰ª∂</li>" +
                "<li>ÂìçÂ∫îÁâπÂÆöURLË∑ØÂæÑËØ∑Ê±Ç</li>" +
                "<li>ÊîØÊåÅÂëΩ‰ª§ÊâßË°åÂíåÊñá‰ª∂Êìç‰Ωú</li>" +
                "<li>Êó†ÈúÄÂú®Á£ÅÁõò‰∏äÁïô‰∏ãÊñá‰ª∂</li>" +
                "<li>ÈáçÂêØÂêéËá™Âä®Ê∏ÖÈô§</li>";
            case "filter" -> 
                "<li>Ê≥®ÂÜåÂú®ËøáÊª§Âô®Èìæ‰∏≠</li>" +
                "<li>ÂèØÊã¶Êà™ÊâÄÊúâHTTPËØ∑Ê±Ç</li>" +
                "<li>ÊâßË°å‰ºòÂÖàÁ∫ßÈ´ò</li>" +
                "<li>Êõ¥ÈöæË¢´Ê£ÄÊµãÂèëÁé∞</li>" +
                "<li>ÊîØÊåÅËØ∑Ê±ÇÂíåÂìçÂ∫î‰øÆÊîπ</li>";
            default -> 
                "<li>ÂÜÖÂ≠ò‰∏≠ÊâßË°åÔºåÊó†Êñá‰ª∂ÁóïËøπ</li>" +
                "<li>ÊåÅ‰πÖÂåñËÆøÈóÆËÉΩÂäõ</li>" +
                "<li>ÊîØÊåÅÂëΩ‰ª§ÊâßË°å</li>";
        };
    }
    
    private String getUrlPattern(String type) {
        return switch (type) {
            case "servlet" -> "/shell/*";
            case "filter" -> "/*";
            case "listener" -> "/listener-shell/*";
            default -> "/shell/*";
        };
    }
    
    private String runBasicTraceDemo() {
        return runEducationalDeserializationDemo("basic");
    }
    
    /**
     * ËøêË°åÊïôËÇ≤ÊÄßÂèçÂ∫èÂàóÂåñÊºîÁ§∫
     */
    private String runEducationalDeserializationDemo(String scenario) {
        try {
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"scenario\": \"").append(scenario).append("\",\n");
            
            switch (scenario.toLowerCase()) {
                case "basic":
                    return runBasicEducationalDemo(json);
                case "dangerous":
                    return runDangerousEducationalDemo(json);
                case "gadget":
                    return runGadgetChainDemo(json);
                case "dos":
                    return runDoSDemo(json);
                default:
                    return runBasicEducationalDemo(json);
            }
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\",\"scenario\":\"" + scenario + "\"}";
        }
    }
    
    /**
     * Âü∫Á°ÄÊïôËÇ≤ÊºîÁ§∫
     */
    private String runBasicEducationalDemo(StringBuilder json) throws Exception {
        // ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂèØÂ∫èÂàóÂåñÂØπË±°ËøõË°åÊºîÁ§∫
        DemoObject obj = new DemoObject("ÊïôËÇ≤ÊºîÁ§∫ÂØπË±°", 12345);
        
        // Â∫èÂàóÂåñ
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(obj);
        oos.close();
        
        // ‰ΩøÁî®Â∏¶ÊïôËÇ≤Ê®°ÂºèÁöÑTraceableObjectInputStreamÂèçÂ∫èÂàóÂåñ
        byte[] serializedData = baos.toByteArray();
        ByteArrayInputStream bais = new ByteArrayInputStream(serializedData);
        TraceableObjectInputStream tois = new TraceableObjectInputStream(bais, true, true); // ÂêØÁî®ÊïôËÇ≤Ê®°Âºè
        
        DemoObject deserializedObj = (DemoObject) tois.readObjectWithEducationalTrace();
        tois.close();
        
        // ÁîüÊàêÊïôËÇ≤ÊÄßJSONÁªìÊûú
        json.append("  \"type\": \"basic\",\n");
        json.append("  \"description\": \"Âü∫Á°ÄJavaÂØπË±°Â∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñÊïôËÇ≤ÊºîÁ§∫\",\n");
        json.append("  \"originalObject\": \"").append(escapeJson(obj.toString())).append("\",\n");
        json.append("  \"deserializedObject\": \"").append(escapeJson(deserializedObj.toString())).append("\",\n");
        json.append("  \"educationalSteps\": ").append(tois.getEducationalSteps().size()).append(",\n");
        json.append("  \"traceSteps\": ").append(tois.getExecutionTrace().size()).append(",\n");
        json.append("  \"educationLog\": \"").append(escapeJson(tois.getEducationLog())).append("\",\n");
        json.append("  \"fullTrace\": \"").append(escapeJson(tois.getTraceAsString())).append("\",\n");
        json.append("  \"statistics\": ").append(tois.getStatistics().toJsonSummary()).append(",\n");
        json.append("  \"securityLevel\": \"SAFE\",\n");
        json.append("  \"educationalPoints\": [\n");
        json.append("    \"JavaÂ∫èÂàóÂåñÁöÑÂü∫Êú¨Â∑•‰ΩúÂéüÁêÜ\",\n");
        json.append("    \"ObjectInputStreamÁöÑËØªÂèñÊµÅÁ®ã\",\n");
        json.append("    \"ÂØπË±°ÂÆû‰æãÂåñÂíåÂ≠óÊÆµÊÅ¢Â§çËøáÁ®ã\",\n");
        json.append("    \"Ëá™ÂÆö‰πâreadObjectÊñπÊ≥ïÁöÑÊ£ÄÊµã\"\n");
        json.append("  ]\n");
        json.append("}");
        
        return json.toString();
    }
    
    /**
     * Âç±Èô©Êìç‰ΩúÊïôËÇ≤ÊºîÁ§∫
     */
    private String runDangerousEducationalDemo(StringBuilder json) throws Exception {
        // ÂàõÂª∫Âê´ÊúâÂç±Èô©ÂëΩ‰ª§ÁöÑÊºîÁ§∫ÂØπË±°
        VulnerableDemo vulnObj = new VulnerableDemo("whoami", "ÊºîÁ§∫Âç±Èô©ÁöÑreadObjectÊñπÊ≥ï");
        
        // Â∫èÂàóÂåñ
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(vulnObj);
        oos.close();
        
        // ‰ΩøÁî®Â∏¶ÊïôËÇ≤Ê®°ÂºèÁöÑTraceableObjectInputStreamÂèçÂ∫èÂàóÂåñ
        byte[] serializedData = baos.toByteArray();
        ByteArrayInputStream bais = new ByteArrayInputStream(serializedData);
        TraceableObjectInputStream tois = new TraceableObjectInputStream(bais, true, true); // ÂêØÁî®ÊïôËÇ≤Ê®°Âºè
        
        VulnerableDemo deserializedObj = (VulnerableDemo) tois.readObjectWithEducationalTrace();
        tois.close();
        
        // ÁîüÊàêÊïôËÇ≤ÊÄßJSONÁªìÊûú
        json.append("  \"type\": \"dangerous\",\n");
        json.append("  \"description\": \"Âç±Èô©ÁöÑreadObjectÊñπÊ≥ïÊïôËÇ≤ÊºîÁ§∫ - Â±ïÁ§∫ÂèçÂ∫èÂàóÂåñÂÆâÂÖ®È£éÈô©\",\n");
        json.append("  \"originalObject\": \"").append(escapeJson(vulnObj.toString())).append("\",\n");
        json.append("  \"deserializedObject\": \"").append(escapeJson(deserializedObj.toString())).append("\",\n");
        json.append("  \"educationalSteps\": ").append(tois.getEducationalSteps().size()).append(",\n");
        json.append("  \"traceSteps\": ").append(tois.getExecutionTrace().size()).append(",\n");
        json.append("  \"educationLog\": \"").append(escapeJson(tois.getEducationLog())).append("\",\n");
        json.append("  \"vulnerabilityLog\": \"").append(escapeJson(deserializedObj.getExecutionLog())).append("\",\n");
        json.append("  \"fullTrace\": \"").append(escapeJson(tois.getTraceAsString())).append("\",\n");
        json.append("  \"statistics\": ").append(tois.getStatistics().toJsonSummary()).append(",\n");
        json.append("  \"securityLevel\": \"HIGH_RISK\",\n");
        json.append("  \"securityWarnings\": [\n");
        json.append("    \"Ê£ÄÊµãÂà∞Ëá™ÂÆö‰πâreadObjectÊñπÊ≥ï\",\n");
        json.append("    \"Âú®ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÊâßË°å‰∫ÜÂ§ñÈÉ®ÂëΩ‰ª§\",\n");
        json.append("    \"ËøôÁßçÊ®°ÂºèÂèØË¢´ÊîªÂáªËÄÖÂà©Áî®ËøõË°åRCEÊîªÂáª\"\n");
        json.append("  ],\n");
        json.append("  \"educationalPoints\": [\n");
        json.append("    \"Ëá™ÂÆö‰πâreadObjectÊñπÊ≥ïÁöÑÂÆâÂÖ®È£éÈô©\",\n");
        json.append("    \"ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÁöÑ‰ª£Á†ÅÊâßË°å\",\n");
        json.append("    \"ËæìÂÖ•È™åËØÅÁöÑÈáçË¶ÅÊÄß\",\n");
        json.append("    \"ÂÆâÂÖ®ÁöÑÂ∫èÂàóÂåñÂÆûË∑µ\"\n");
        json.append("  ]\n");
        json.append("}");
        
        return json.toString();
    }
    
    /**
     * GadgetÈìæÊïôËÇ≤ÊºîÁ§∫
     */
    private String runGadgetChainDemo(StringBuilder json) throws Exception {
        // ÂàõÂª∫GadgetÈìæÊºîÁ§∫ÂØπË±°
        GadgetChainDemo gadgetObj = new GadgetChainDemo("runtime.exec", "whoami");
        
        // Â∫èÂàóÂåñ
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(gadgetObj);
        oos.close();
        
        // ‰ΩøÁî®Â∏¶ÊïôËÇ≤Ê®°ÂºèÁöÑTraceableObjectInputStreamÂèçÂ∫èÂàóÂåñ
        byte[] serializedData = baos.toByteArray();
        ByteArrayInputStream bais = new ByteArrayInputStream(serializedData);
        TraceableObjectInputStream tois = new TraceableObjectInputStream(bais, true, true); // ÂêØÁî®ÊïôËÇ≤Ê®°Âºè
        
        GadgetChainDemo deserializedObj = (GadgetChainDemo) tois.readObjectWithEducationalTrace();
        tois.close();
        
        // ÁîüÊàêÊïôËÇ≤ÊÄßJSONÁªìÊûú
        json.append("  \"type\": \"gadget\",\n");
        json.append("  \"description\": \"Gadget ChainÊîªÂáªÈìæÊïôËÇ≤ÊºîÁ§∫ - Â±ïÁ§∫Â§çÊùÇÂèçÂ∫èÂàóÂåñÊîªÂáª\",\n");
        json.append("  \"originalObject\": \"").append(escapeJson(gadgetObj.toString())).append("\",\n");
        json.append("  \"deserializedObject\": \"").append(escapeJson(deserializedObj.toString())).append("\",\n");
        json.append("  \"educationalSteps\": ").append(tois.getEducationalSteps().size()).append(",\n");
        json.append("  \"traceSteps\": ").append(tois.getExecutionTrace().size()).append(",\n");
        json.append("  \"educationLog\": \"").append(escapeJson(tois.getEducationLog())).append("\",\n");
        json.append("  \"gadgetChainLog\": \"").append(escapeJson(deserializedObj.getChainLog())).append("\",\n");
        json.append("  \"fullTrace\": \"").append(escapeJson(tois.getTraceAsString())).append("\",\n");
        json.append("  \"statistics\": ").append(tois.getStatistics().toJsonSummary()).append(",\n");
        json.append("  \"securityLevel\": \"CRITICAL\",\n");
        json.append("  \"attackVector\": \"Commons Collections Gadget Chain\",\n");
        json.append("  \"securityWarnings\": [\n");
        json.append("    \"Ê£ÄÊµãÂà∞Gadget ChainÊîªÂáªÊ®°Âºè\",\n");
        json.append("    \"Â§ö‰∏™Á±ªÁöÑreadObjectÊñπÊ≥ïË¢´ÈìæÂºèË∞ÉÁî®\",\n");
        json.append("    \"ÊúÄÁªàÂØºËá¥‰ªªÊÑè‰ª£Á†ÅÊâßË°å\"\n");
        json.append("  ],\n");
        json.append("  \"educationalPoints\": [\n");
        json.append("    \"Gadget ChainÊîªÂáªÁöÑÂ∑•‰ΩúÂéüÁêÜ\",\n");
        json.append("    \"Commons CollectionsÊºèÊ¥ûÂàÜÊûê\",\n");
        json.append("    \"ÂèçÂ∫èÂàóÂåñÊîªÂáªÈìæÁöÑÊûÑÈÄ†\",\n");
        json.append("    \"Èò≤Âæ°Gadget ChainÊîªÂáªÁöÑÊñπÊ≥ï\"\n");
        json.append("  ]\n");
        json.append("}");
        
        return json.toString();
    }
    
    /**
     * DoSÊîªÂáªÊïôËÇ≤ÊºîÁ§∫
     */
    private String runDoSDemo(StringBuilder json) throws Exception {
        // ÂàõÂª∫‰∏Ä‰∏™Â§ßÂØπË±°Áî®‰∫éDoSÊºîÁ§∫ÔºàËøôÈáåÁÆÄÂåñÂÆûÁé∞Ôºâ
        DemoObject dosObj = new DemoObject("DoSÊºîÁ§∫ÂØπË±°", Integer.MAX_VALUE);
        
        // Â∫èÂàóÂåñ
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(dosObj);
        oos.close();
        
        // ‰ΩøÁî®Â∏¶ÊïôËÇ≤Ê®°ÂºèÁöÑTraceableObjectInputStreamÂèçÂ∫èÂàóÂåñ
        byte[] serializedData = baos.toByteArray();
        ByteArrayInputStream bais = new ByteArrayInputStream(serializedData);
        TraceableObjectInputStream tois = new TraceableObjectInputStream(bais, true, true); // ÂêØÁî®ÊïôËÇ≤Ê®°Âºè
        
        long startTime = System.currentTimeMillis();
        DemoObject deserializedObj = (DemoObject) tois.readObjectWithEducationalTrace();
        long endTime = System.currentTimeMillis();
        tois.close();
        
        // ÁîüÊàêÊïôËÇ≤ÊÄßJSONÁªìÊûú
        json.append("  \"type\": \"dos\",\n");
        json.append("  \"description\": \"ÂèçÂ∫èÂàóÂåñDoSÊîªÂáªÊïôËÇ≤ÊºîÁ§∫ - Â±ïÁ§∫ËµÑÊ∫êËÄóÂ∞ΩÊîªÂáª\",\n");
        json.append("  \"originalObject\": \"").append(escapeJson(dosObj.toString())).append("\",\n");
        json.append("  \"deserializedObject\": \"").append(escapeJson(deserializedObj.toString())).append("\",\n");
        json.append("  \"educationalSteps\": ").append(tois.getEducationalSteps().size()).append(",\n");
        json.append("  \"traceSteps\": ").append(tois.getExecutionTrace().size()).append(",\n");
        json.append("  \"educationLog\": \"").append(escapeJson(tois.getEducationLog())).append("\",\n");
        json.append("  \"processingTime\": ").append(endTime - startTime).append(",\n");
        json.append("  \"dataSize\": ").append(serializedData.length).append(",\n");
        json.append("  \"fullTrace\": \"").append(escapeJson(tois.getTraceAsString())).append("\",\n");
        json.append("  \"statistics\": ").append(tois.getStatistics().toJsonSummary()).append(",\n");
        json.append("  \"securityLevel\": \"MEDIUM_RISK\",\n");
        json.append("  \"attackVector\": \"Resource Exhaustion\",\n");
        json.append("  \"securityWarnings\": [\n");
        json.append("    \"Â§ßÈáèÊï∞ÊçÆÂèçÂ∫èÂàóÂåñÂèØËÉΩÂØºËá¥ÂÜÖÂ≠òËÄóÂ∞Ω\",\n");
        json.append("    \"Â§ÑÁêÜÊó∂Èó¥ËøáÈïøÂèØËÉΩÂØºËá¥ÊúçÂä°‰∏çÂèØÁî®\",\n");
        json.append("    \"ÈúÄË¶ÅÈôêÂà∂ÂèçÂ∫èÂàóÂåñÊï∞ÊçÆÁöÑÂ§ßÂ∞è\"\n");
        json.append("  ],\n");
        json.append("  \"educationalPoints\": [\n");
        json.append("    \"ÂèçÂ∫èÂàóÂåñDoSÊîªÂáªÁöÑÂéüÁêÜ\",\n");
        json.append("    \"ËµÑÊ∫êÈôêÂà∂ÁöÑÈáçË¶ÅÊÄß\",\n");
        json.append("    \"ËæìÂÖ•Â§ßÂ∞èÈ™åËØÅ\",\n");
        json.append("    \"Ë∂ÖÊó∂Êú∫Âà∂ÁöÑÂÆûÁé∞\"\n");
        json.append("  ]\n");
        json.append("}");
        
        return json.toString();
    }
    
    private String runSpringDemo() {
        return runSpringDemo("basic");
    }
    
    private String runSpringDemo(String scenario) {
        try {
            SpringDeserializationDemo.SpringExecutionTracer tracer = 
                new SpringDeserializationDemo.SpringExecutionTracer();
            
            var result = tracer.demonstrateSpringDeserialization();
            
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"type\": \"spring\",\n");
            json.append("  \"scenario\": \"").append(scenario).append("\",\n");
            json.append("  \"description\": \"").append(getSpringScenarioDescription(scenario)).append("\",\n");
            json.append("  \"executionSteps\": ").append(result.getExecutionSteps().size()).append(",\n");
            json.append("  \"beanCount\": ").append(result.getBeanCreationMap().size()).append(",\n");
            json.append("  \"springContextActive\": ").append(result.isContextActive()).append(",\n");
            json.append("  \"educationalSteps\": ").append(result.getEducationalSteps().size()).append(",\n");
            json.append("  \"educationLog\": \"").append(escapeJson(result.getEducationLog())).append("\",\n");
            json.append("  \"securityLevel\": \"").append(getSpringSecurityLevel(scenario)).append("\",\n");
            json.append("  \"securityWarnings\": ").append(generateSpringSecurityWarnings(scenario)).append(",\n");
            json.append("  \"educationalPoints\": ").append(generateSpringEducationalPoints(scenario)).append(",\n");
            json.append("  \"details\": [\n");
            
            var steps = result.getExecutionSteps();
            for (int i = 0; i < steps.size(); i++) {
                if (i > 0) json.append(",\n");
                var step = steps.get(i);
                json.append("    {\"step\": \"").append(escapeJson(step.getDescription()))
                    .append("\", \"type\": \"").append(step.getStepType()).append("\"}");
            }
            
            json.append("\n  ]\n");
            json.append("}");
            
            return json.toString();
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\",\"scenario\":\"" + scenario + "\"}";
        }
    }
    
    private String getSpringScenarioDescription(String scenario) {
        switch (scenario.toLowerCase()) {
            case "bean-lifecycle":
                return "Spring BeanÁîüÂëΩÂë®ÊúüÊºîÁ§∫ - Â±ïÁ§∫Bean‰ªéÂàõÂª∫Âà∞ÈîÄÊØÅÁöÑÂÆåÊï¥ËøáÁ®ã";
            case "aop-proxy":
                return "Spring AOP‰ª£ÁêÜÊºîÁ§∫ - Â±ïÁ§∫‰ª£ÁêÜÂØπË±°ÁöÑÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñËøáÁ®ã";
            case "security-context":
                return "Spring Security‰∏ä‰∏ãÊñáÊºîÁ§∫ - Â±ïÁ§∫ÂÆâÂÖ®‰∏ä‰∏ãÊñáÁöÑÂ∫èÂàóÂåñÈ£éÈô©";
            default:
                return "SpringÊ°ÜÊû∂Âü∫Á°ÄÂ∫èÂàóÂåñÊºîÁ§∫ - Â±ïÁ§∫SpringÁéØÂ¢É‰∏ãÁöÑÂØπË±°Â∫èÂàóÂåñ";
        }
    }
    
    private String getSpringSecurityLevel(String scenario) {
        switch (scenario.toLowerCase()) {
            case "security-context":
                return "HIGH_RISK";
            case "aop-proxy":
                return "MEDIUM_RISK";
            default:
                return "SAFE";
        }
    }
    
    private String generateSpringSecurityWarnings(String scenario) {
        switch (scenario.toLowerCase()) {
            case "security-context":
                return "[\"Spring Security‰∏ä‰∏ãÊñáÂåÖÂê´ÊïèÊÑü‰ø°ÊÅØ\", \"ÂèØËÉΩÊ≥ÑÈú≤Áî®Êà∑ËÆ§ËØÅÁä∂ÊÄÅ\", \"ÈúÄË¶ÅÂä†ÂØÜÂ∫èÂàóÂåñÊï∞ÊçÆ\"]";
            case "aop-proxy":
                return "[\"AOP‰ª£ÁêÜÂØπË±°ÂèØËÉΩÊâßË°åÊÑèÂ§ñÁöÑÂàáÈù¢ÈÄªËæë\", \"‰ª£ÁêÜÈìæÂèØËÉΩË¢´ÊÅ∂ÊÑèÂà©Áî®\"]";
            case "bean-lifecycle":
                return "[\"BeanÂàùÂßãÂåñÂõûË∞ÉÂèØËÉΩÊâßË°åÂç±Èô©Êìç‰Ωú\", \"ÈúÄË¶ÅÈ™åËØÅBeanÁöÑÊù•Ê∫ê\"]";
            default:
                return "[]";
        }
    }
    
    private String generateSpringEducationalPoints(String scenario) {
        switch (scenario.toLowerCase()) {
            case "bean-lifecycle":
                return "[\"Spring BeanÁöÑÂÆåÊï¥ÁîüÂëΩÂë®Êúü\", \"InitializingBeanÂíåDisposableBeanÊé•Âè£\", \"@PostConstructÂíå@PreDestroyÊ≥®Ëß£\", \"BeanPostProcessorÁöÑ‰ΩúÁî®\"]";
            case "aop-proxy":
                return "[\"Spring AOPÁöÑÂ∑•‰ΩúÂéüÁêÜ\", \"JDKÂä®ÊÄÅ‰ª£ÁêÜvs CGLIB‰ª£ÁêÜ\", \"‰ª£ÁêÜÂØπË±°ÁöÑÂ∫èÂàóÂåñÈô∑Èò±\", \"ÂàáÈù¢ÈÄªËæëÁöÑÂÆâÂÖ®ËÄÉËôë\"]";
            case "security-context":
                return "[\"Spring SecurityÊû∂ÊûÑ\", \"SecurityContextHolderÁöÑÂ∑•‰ΩúÊú∫Âà∂\", \"ËÆ§ËØÅ‰ø°ÊÅØÁöÑÂ∫èÂàóÂåñÈ£éÈô©\", \"‰ºöËØùÂÆâÂÖ®ÊúÄ‰Ω≥ÂÆûË∑µ\"]";
            default:
                return "[\"SpringÂÆπÂô®ÁöÑÂü∫Êú¨Ê¶ÇÂøµ\", \"‰æùËµñÊ≥®ÂÖ•Êú∫Âà∂\", \"SpringÂ∫èÂàóÂåñÊîØÊåÅ\", \"Ê°ÜÊû∂Á∫ßÂ∫èÂàóÂåñÂÆâÂÖ®\"]";
        }
    }
    
    private String runJVMVisualizationDemo() {
        return runJVMVisualizationDemo("basic");
    }
    
    private String runJVMVisualizationDemo(String scenario) {
        try {
            JVMExecutionVisualizer visualizer = new JVMExecutionVisualizer();
            
            // Ê†πÊçÆÂú∫ÊôØÈÖçÁΩÆ‰∏çÂêåÁöÑÁõëÊéßÂèÇÊï∞
            configureJVMVisualizerForScenario(visualizer, scenario);
            
            // ÂàõÂª∫ÊºîÁ§∫ÂØπË±°
            Object demoObj = createJVMDemoObject(scenario);
            
            // Â∫èÂàóÂåñ
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(demoObj);
            oos.close();
            
            // JVMÂèØËßÜÂåñÂàÜÊûê
            long startTime = System.currentTimeMillis();
            var visualization = visualizer.visualizeDeserialization(baos.toByteArray());
            long endTime = System.currentTimeMillis();
            
            // ÁîüÊàêÂ¢ûÂº∫ÁöÑJSONÁªìÊûú
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"type\": \"jvm\",\n");
            json.append("  \"scenario\": \"").append(scenario).append("\",\n");
            json.append("  \"description\": \"").append(getJVMScenarioDescription(scenario)).append("\",\n");
            json.append("  \"analysisTime\": ").append(endTime - startTime).append(",\n");
            json.append("  \"educationalSteps\": ").append(visualization.getEducationalSteps().size()).append(",\n");
            json.append("  \"educationLog\": \"").append(escapeJson(visualization.getEducationLog())).append("\",\n");
            json.append("  \"securityLevel\": \"").append(getJVMSecurityLevel(scenario)).append("\",\n");
            json.append("  \"securityWarnings\": ").append(generateJVMSecurityWarnings(scenario)).append(",\n");
            json.append("  \"educationalPoints\": ").append(generateJVMEducationalPoints(scenario)).append(",\n");
            json.append("  \"memoryUsage\": ").append(visualization.getMemoryUsageData()).append(",\n");
            json.append("  \"performanceMetrics\": ").append(visualization.getPerformanceMetrics()).append(",\n");
            json.append("  \"executionFrames\": ").append(visualization.getExecutionFrames().size()).append(",\n");
            json.append("  \"visualizationData\": ").append(visualization.toJsonString()).append("\n");
            json.append("}");
            
            return json.toString();
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\",\"scenario\":\"" + scenario + "\"}";
        }
    }
    
    private void configureJVMVisualizerForScenario(JVMExecutionVisualizer visualizer, String scenario) {
        switch (scenario.toLowerCase()) {
            case "memory-analysis":
                visualizer.enableMemoryProfiling();
                visualizer.setMemorySamplingInterval(10);
                break;
            case "bytecode-trace":
                visualizer.enableBytecodeInstrumentation();
                visualizer.addMonitoredPackage("java.lang.reflect");
                break;
            case "reflection-chain":
                visualizer.enableReflectionTracking();
                visualizer.addMonitoredPackage("java.lang.reflect");
                visualizer.addMonitoredPackage("sun.reflect");
                break;
            case "performance-analysis":
                visualizer.enablePerformanceProfiling();
                visualizer.setProfileSamplingRate(1);
                break;
            default:
                visualizer.enableBasicInstrumentation();
                break;
        }
    }
    
    private Object createJVMDemoObject(String scenario) {
        switch (scenario.toLowerCase()) {
            case "memory-analysis":
                // ÂàõÂª∫Â§ßÂØπË±°Áî®‰∫éÂÜÖÂ≠òÂàÜÊûê
                return new LargeObject(1000, "JVMÂÜÖÂ≠òÂàÜÊûêÊºîÁ§∫");
            case "bytecode-trace":
                // ÂàõÂª∫ÊúâÂ§çÊùÇÊñπÊ≥ïË∞ÉÁî®ÁöÑÂØπË±°
                return new ComplexObject("Â≠óËäÇÁ†ÅËøΩË∏™", true);
            case "reflection-chain":
                // ÂàõÂª∫‰ΩøÁî®ÂèçÂ∞ÑÁöÑÂØπË±°
                return new ReflectiveObject("ÂèçÂ∞ÑË∞ÉÁî®ÈìæÊºîÁ§∫");
            case "performance-analysis":
                // ÂàõÂª∫ÊÄßËÉΩÂØÜÈõÜÂûãÂØπË±°
                return new PerformanceObject(500);
            default:
                return new DemoObject("JVMÂü∫Á°ÄÊºîÁ§∫", 99999);
        }
    }
    
    private String getJVMScenarioDescription(String scenario) {
        switch (scenario.toLowerCase()) {
            case "memory-analysis":
                return "JVMÂÜÖÂ≠òÂàÜÊûêÊºîÁ§∫ - ËØ¶ÁªÜËøΩË∏™Â†ÜÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµÂíåÂØπË±°ÂàÜÈÖç";
            case "bytecode-trace":
                return "Â≠óËäÇÁ†ÅÊâßË°åËøΩË∏™ - Ê∑±ÂÖ•ÂàÜÊûêÊØèÊù°Â≠óËäÇÁ†ÅÊåá‰ª§ÁöÑÊâßË°åËøáÁ®ã";
            case "reflection-chain":
                return "ÂèçÂ∞ÑË∞ÉÁî®ÈìæÂàÜÊûê - ËøΩË∏™ÂèçÂ∞ÑAPIÁöÑÂÆåÊï¥Ë∞ÉÁî®ËøáÁ®ã";
            case "performance-analysis":
                return "JVMÊÄßËÉΩÂàÜÊûê - ÁõëÊéßÊâßË°åÊÄßËÉΩÂíåËµÑÊ∫êÊ∂àËÄó";
            default:
                return "JVMÂü∫Á°ÄÂèØËßÜÂåñ - Â±ïÁ§∫JVMÂ±ÇÈù¢ÁöÑÂü∫Êú¨ÊâßË°åÊú∫Âà∂";
        }
    }
    
    private String getJVMSecurityLevel(String scenario) {
        switch (scenario.toLowerCase()) {
            case "reflection-chain":
                return "HIGH_RISK";
            case "bytecode-trace":
                return "MEDIUM_RISK";
            default:
                return "SAFE";
        }
    }
    
    private String generateJVMSecurityWarnings(String scenario) {
        switch (scenario.toLowerCase()) {
            case "reflection-chain":
                return "[\"ÂèçÂ∞ÑË∞ÉÁî®ÂèØËÉΩÁªïËøáËÆøÈóÆÊéßÂà∂\", \"setAccessible()ÂèØËÉΩÊö¥Èú≤ÁßÅÊúâÊàêÂëò\", \"Âä®ÊÄÅÊñπÊ≥ïË∞ÉÁî®Èöæ‰ª•ÈùôÊÄÅÂàÜÊûê\"]";
            case "bytecode-trace":
                return "[\"Â≠óËäÇÁ†ÅÊìç‰ΩúÂèØËÉΩ‰øÆÊîπÁ±ªË°å‰∏∫\", \"ÈúÄË¶ÅÈò≤ËåÉÂ≠óËäÇÁ†ÅÊ≥®ÂÖ•ÊîªÂáª\"]";
            case "memory-analysis":
                return "[\"Â§ßÂØπË±°ÂèØËÉΩÂØºËá¥ÂÜÖÂ≠òËÄóÂ∞Ω\", \"ÈúÄË¶ÅÁõëÊéßÂ†ÜÂÜÖÂ≠ò‰ΩøÁî®\"]";
            default:
                return "[]";
        }
    }
    
    private String generateJVMEducationalPoints(String scenario) {
        switch (scenario.toLowerCase()) {
            case "memory-analysis":
                return "[\"JVMÂ†ÜÂÜÖÂ≠òÁªìÊûÑ\", \"ÂØπË±°ÂàÜÈÖçÂíåÂõûÊî∂Êú∫Âà∂\", \"ÂÜÖÂ≠òÊ≥ÑÊºèÊ£ÄÊµãÊñπÊ≥ï\", \"ÂûÉÂúæÊî∂ÈõÜÂô®Â∑•‰ΩúÂéüÁêÜ\"]";
            case "bytecode-trace":
                return "[\"JavaÂ≠óËäÇÁ†ÅÊåá‰ª§ÈõÜ\", \"Ê†àÂ∏ßÂíåÊìç‰ΩúÊï∞Ê†à\", \"ÊñπÊ≥ïË∞ÉÁî®ÂíåËøîÂõûÊú∫Âà∂\", \"ÂºÇÂ∏∏Â§ÑÁêÜÁöÑÂ≠óËäÇÁ†ÅÂÆûÁé∞\"]";
            case "reflection-chain":
                return "[\"JavaÂèçÂ∞ÑAPIËØ¶Ëß£\", \"Method.invoke()ÂÆûÁé∞ÂéüÁêÜ\", \"ÂèçÂ∞ÑÊÄßËÉΩ‰ºòÂåñÊäÄÂ∑ß\", \"ÂèçÂ∞ÑÂÆâÂÖ®Ê≥®ÊÑè‰∫ãÈ°π\"]";
            case "performance-analysis":
                return "[\"JVMÊÄßËÉΩË∞É‰ºòÂü∫Á°Ä\", \"ÁÉ≠ÁÇπ‰ª£Á†ÅËØÜÂà´\", \"JITÁºñËØëÂô®‰ºòÂåñ\", \"ÊÄßËÉΩÁõëÊéßÂ∑•ÂÖ∑‰ΩøÁî®\"]";
            default:
                return "[\"JVMÂü∫Á°ÄÊû∂ÊûÑ\", \"Á±ªÂä†ËΩΩÊú∫Âà∂\", \"ÊâßË°åÂºïÊìéÂéüÁêÜ\", \"ËøêË°åÊó∂Êï∞ÊçÆÂå∫Âüü\"]";
        }
    }
    
    private String generateDemoHomePage() {
        return """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaÂèçÂ∫èÂàóÂåñÂÆâÂÖ®ÂüπËÆ≠ÊºîÁ§∫Âπ≥Âè∞</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
            font-size: 1.2em;
        }
        .demo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .demo-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            border-left: 5px solid #3498db;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .demo-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 25px rgba(0,0,0,0.15);
        }
        .demo-card h3 {
            color: #2c3e50;
            margin-top: 0;
            margin-bottom: 15px;
        }
        .demo-card p {
            color: #555;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-right: 10px;
            margin-bottom: 10px;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background: #2980b9;
        }
        .btn-success { background: #27ae60; }
        .btn-success:hover { background: #229954; }
        .btn-warning { background: #f39c12; }
        .btn-warning:hover { background: #e67e22; }
        .btn-danger { background: #e74c3c; }
        .btn-danger:hover { background: #c0392b; }
        
        .features {
            margin: 40px 0;
            padding: 20px;
            background: #ecf0f1;
            border-radius: 8px;
        }
        .features h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }
        .feature-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .feature-item {
            padding: 15px;
            background: white;
            border-radius: 5px;
            border-left: 3px solid #3498db;
        }
        .feature-item h4 {
            color: #2c3e50;
            margin: 0 0 10px 0;
        }
        .feature-item p {
            color: #555;
            margin: 0;
            font-size: 0.9em;
        }
        
        .warning {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .warning strong {
            color: #d73502;
        }
        
        /* Result tabs styling */
        .result-tab {
            background: #95a5a6;
            color: white;
            border: none;
            padding: 10px 15px;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .result-tab:hover {
            background: #7f8c8d;
        }
        .result-tab.active {
            background: #3498db;
        }
        .result-content {
            display: none;
        }
        .result-content.active {
            display: block;
        }
        .education-step {
            margin: 10px 0;
            padding: 10px;
            background: #f8f9fa;
            border-left: 3px solid #28a745;
            border-radius: 3px;
        }
        .security-warning {
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
            border-left: 4px solid #e74c3c;
            background: #fdf2f2;
            color: #721c24;
        }
        .security-safe {
            border-left-color: #27ae60;
            background: #d5f4e6;
            color: #155724;
        }
        .security-medium {
            border-left-color: #f39c12;
            background: #fff3cd;
            color: #856404;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>JavaÂèçÂ∫èÂàóÂåñÂÆâÂÖ®ÂüπËÆ≠ÊºîÁ§∫Âπ≥Âè∞</h1>
        <p class="subtitle">Ê∑±Â∫¶ÂâñÊûêÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÂéüÁêÜ‰∏éÈò≤Êä§Êú∫Âà∂</p>
        
        <div class="warning">
            <strong>‚ö†Ô∏è ÂÆâÂÖ®ÊèêÈÜí:</strong> 
            Êú¨ÊºîÁ§∫Âπ≥Âè∞‰ªÖ‰æõÂÆâÂÖ®ÂüπËÆ≠ÂíåÊïôËÇ≤Áî®ÈÄîÔºåÂåÖÂê´ÁöÑÊºèÊ¥û‰ª£Á†Å‰ªÖÁî®‰∫éÁêÜËß£ÊîªÂáªÂéüÁêÜÔºåËØ∑ÂãøÁî®‰∫éÈùûÊ≥ïÁî®ÈÄî„ÄÇ
        </div>
        
        <div class="demo-grid">
            <div class="demo-card">
                <h3>üéì JavaÂèçÂ∫èÂàóÂåñÊïôËÇ≤ÊºîÁ§∫</h3>
                <p>Ê∑±Â∫¶ÂâñÊûêJavaÂèçÂ∫èÂàóÂåñËøáÁ®ãÔºåÈÄöËøá4‰∏™‰∏çÂêåÂÆâÂÖ®Á∫ßÂà´ÁöÑÊºîÁ§∫Â∏ÆÂä©ÂºÄÂèëËÄÖÁêÜËß£ÂèçÂ∫èÂàóÂåñÊú∫Âà∂‰∏éÂÆâÂÖ®È£éÈô©„ÄÇ</p>
                <a href="#" class="btn" onclick="runDemo('basic')">üü¢ Âü∫Á°ÄÂÆâÂÖ®ÊºîÁ§∫</a>
                <a href="#" class="btn btn-warning" onclick="runDemo('dangerous')">üü° Âç±Èô©Êìç‰ΩúÊºîÁ§∫</a>
                <a href="#" class="btn btn-danger" onclick="runDemo('gadget')">üî¥ GadgetÈìæÊîªÂáª</a>
                <a href="#" class="btn btn-secondary" onclick="runDemo('dos')">‚ö´ DoSÊîªÂáªÊºîÁ§∫</a>
                <a href="#" class="btn btn-success" onclick="showTrace('basic')">üìä Êü•ÁúãËØ¶ÁªÜËøΩË∏™</a>
            </div>
            
            <div class="demo-card">
                <h3>üå± SpringÊ°ÜÊû∂ÊºîÁ§∫</h3>
                <p>ÊºîÁ§∫SpringÊ°ÜÊû∂‰∏≠BeanÁöÑÂ∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñËøáÁ®ãÔºåÂåÖÊã¨AOP‰ª£ÁêÜÂØπË±°ÁöÑÂ§ÑÁêÜÊú∫Âà∂ÂíåËá™ÂÆö‰πâÂ∫èÂàóÂåñÈÄªËæë„ÄÇ</p>
                <a href="#" class="btn" onclick="runDemo('spring')">Âü∫Á°ÄÊºîÁ§∫</a>
                <a href="#" class="btn btn-success" onclick="runDemo('spring-bean')">BeanÁîüÂëΩÂë®Êúü</a>
                <a href="#" class="btn btn-warning" onclick="runDemo('spring-aop')">AOP‰ª£ÁêÜÊºîÁ§∫</a>
                <a href="#" class="btn btn-danger" onclick="runDemo('spring-security')">ÂÆâÂÖ®‰∏ä‰∏ãÊñá</a>
                <a href="/api/demo/visualization/spring" class="btn btn-secondary" target="_blank">Êü•ÁúãÂèØËßÜÂåñ</a>
            </div>
            
            <div class="demo-card">
                <h3>‚öôÔ∏è JVMÊâßË°åÂèØËßÜÂåñ</h3>
                <p>Ê∑±ÂÖ•JVMÂ±ÇÈù¢ÔºåÂèØËßÜÂåñÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÁöÑÊñπÊ≥ïË∞ÉÁî®„ÄÅÂØπË±°ÂàõÂª∫ÂíåÂèçÂ∞ÑÊìç‰ΩúÔºåÁêÜËß£Â∫ïÂ±ÇÊâßË°åÊú∫Âà∂„ÄÇ</p>
                <a href="#" class="btn" onclick="runDemo('jvm')">Âü∫Á°ÄÊºîÁ§∫</a>
                <a href="#" class="btn btn-info" onclick="runDemo('jvm-memory')">ÂÜÖÂ≠òÂàÜÊûê</a>
                <a href="#" class="btn btn-warning" onclick="runDemo('jvm-bytecode')">Â≠óËäÇÁ†ÅËøΩË∏™</a>
                <a href="#" class="btn btn-danger" onclick="runDemo('jvm-reflection')">ÂèçÂ∞ÑË∞ÉÁî®Èìæ</a>
                <a href="#" class="btn btn-success" onclick="runDemo('jvm-performance')">ÊÄßËÉΩÂàÜÊûê</a>
                <a href="/api/demo/visualization/jvm" class="btn btn-secondary" target="_blank">Êü•ÁúãÂèØËßÜÂåñ</a>
            </div>
            
            <div class="demo-card">
                <h3>üîß WebÁªÑ‰ª∂ËøΩË∏™ÊºîÁ§∫</h3>
                <p>ÂÖ®Èù¢ÊºîÁ§∫Servlet„ÄÅFilter„ÄÅListener‰∏âÂ§ßWebÁªÑ‰ª∂ÁöÑÂèçÂ∫èÂàóÂåñËøáÁ®ãÔºåÂåÖÊã¨ÂÆâÂÖ®Ê£ÄÊµãÂíåÈ£éÈô©ËØÑ‰º∞„ÄÇ</p>
                <a href="#" class="btn" onclick="runDemo('components')">ËøêË°åÁªÑ‰ª∂ËøΩË∏™</a>
                <a href="#" class="btn" onclick="runDemo('servlet')">Servlet</a>
                <a href="#" class="btn" onclick="runDemo('filter')">Filter</a>
                <a href="#" class="btn" onclick="runDemo('listener')">Listener</a>
            </div>
            
            <div class="demo-card">
                <h3>üõ°Ô∏è Èò≤Êä§Êú∫Âà∂ÊºîÁ§∫</h3>
                <p>ÊºîÁ§∫ÂêÑÁßçÂèçÂ∫èÂàóÂåñÈò≤Êä§Êé™ÊñΩÔºåÂåÖÊã¨ÈªëÁôΩÂêçÂçï„ÄÅËá™ÂÆö‰πâObjectInputStreamÂíåÊ°ÜÊû∂Á∫ßÈò≤Êä§„ÄÇ</p>
                <a href="#" class="btn btn-success" onclick="alert('ËØ•ÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠')">Èò≤Êä§ÊºîÁ§∫</a>
                <a href="#" class="btn" onclick="alert('ËØ•ÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠')">ÁªïËøáÊµãËØï</a>
            </div>
            
            <div class="demo-card">
                <h3>üíª ÂÜÖÂ≠òÈ©¨Ê£ÄÊµã‰∏éÂàÜÊûê</h3>
                <p>ÂÖ®Èù¢ÁöÑÂÜÖÂ≠òÈ©¨Ê£ÄÊµãÂèØËßÜÂåñÂπ≥Âè∞ÔºåÂ±ïÁ§∫Filter„ÄÅServlet„ÄÅListenerÂûãÂÜÖÂ≠òÈ©¨ÁöÑÊ£ÄÊµãÊñπÊ≥ïÂíåÈò≤Êä§Á≠ñÁï•„ÄÇ</p>
                <a href="#" class="btn btn-danger" onclick="testMemshell('servlet')">üåê ServletÂÜÖÂ≠òÈ©¨ÊµãËØï</a>
                <a href="#" class="btn btn-danger" onclick="testMemshell('filter')">üîÑ FilterÂÜÖÂ≠òÈ©¨ÊµãËØï</a>
                <a href="#" class="btn btn-danger" onclick="testMemshell('listener')">üëÇ ListenerÂÜÖÂ≠òÈ©¨ÊµãËØï</a>
                <a href="/tomcat-memshell-scanner.jsp" class="btn" target="_blank">‰º†ÁªüÊâ´ÊèèÂô®</a>
            </div>
        </div>
        
        <div class="features">
            <h2>üéì ÊïôËÇ≤ÊºîÁ§∫ËØ¥Êòé</h2>
            <div class="feature-list">
                <div class="feature-item">
                    <h4>üü¢ Âü∫Á°ÄÂÆâÂÖ®ÊºîÁ§∫</h4>
                    <p>Â±ïÁ§∫Ê†áÂáÜJavaÂØπË±°ÁöÑÂ∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñËøáÁ®ãÔºåÂåÖÊã¨ÂØπË±°ÂàõÂª∫„ÄÅÂ≠óÊÆµÊÅ¢Â§ç„ÄÅÊñπÊ≥ïË∞ÉÁî®Á≠âÂêÑ‰∏™Ê≠•È™§ÁöÑËØ¶ÁªÜËøΩË∏™„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üü° Âç±Èô©Êìç‰ΩúÊºîÁ§∫</h4>
                    <p>ÊºîÁ§∫Ëá™ÂÆö‰πâreadObjectÊñπÊ≥ïÂ¶Ç‰ΩïÂú®ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÊâßË°å‰ªªÊÑè‰ª£Á†ÅÔºåÂ∏ÆÂä©ÁêÜËß£RCEÊîªÂáªÁöÑÂéüÁêÜ„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üî¥ GadgetÈìæÊîªÂáª</h4>
                    <p>Â±ïÁ§∫ÂÆåÊï¥ÁöÑGadget ChainÊîªÂáªËøáÁ®ãÔºåËØ¥ÊòéÂ¶Ç‰ΩïÈÄöËøáÈìæÂºèË∞ÉÁî®ÊúÄÁªàÂÆûÁé∞‰ª£Á†ÅÊâßË°å„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üå± SpringÊ°ÜÊû∂Ê∑±Â∫¶Ëß£Êûê</h4>
                    <p>ÂÖ®Èù¢Â±ïÁ§∫SpringÁéØÂ¢É‰∏ãÁöÑÂ∫èÂàóÂåñÊú∫Âà∂ÔºåÂåÖÊã¨BeanÁîüÂëΩÂë®Êúü„ÄÅAOP‰ª£ÁêÜÂØπË±°„ÄÅSecurity‰∏ä‰∏ãÊñáÁ≠âÈ´òÁ∫ßÁâπÊÄß„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>‚öôÔ∏è JVMÂ±ÇÈù¢ÂèØËßÜÂåñ</h4>
                    <p>Ê∑±ÂÖ•JVMÂ∫ïÂ±ÇÔºåÂàÜÊûêÂÜÖÂ≠ò‰ΩøÁî®„ÄÅÂ≠óËäÇÁ†ÅÊâßË°å„ÄÅÂèçÂ∞ÑË∞ÉÁî®Èìæ„ÄÅÊÄßËÉΩÊåáÊ†áÁ≠âÊ†∏ÂøÉÊú∫Âà∂„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üìä Â§öÁª¥Â∫¶ÂàÜÊûê</h4>
                    <p>ÊØè‰∏™ÊºîÁ§∫ÈÉΩÊèê‰æõÂ§öÊ†áÁ≠æÈ°µÂ±ïÁ§∫ÔºöÊÄªËßà„ÄÅÊïôËÇ≤Ê≠•È™§„ÄÅÊâßË°åËøΩË∏™„ÄÅÂÆâÂÖ®ÂàÜÊûêÔºåÂÖ®Êñπ‰ΩçÁêÜËß£ÊäÄÊúØÁªÜËäÇ„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üõ°Ô∏è ÂÆâÂÖ®È£éÈô©ËØÑ‰º∞</h4>
                    <p>Ëá™Âä®ÂàÜÊûêÂÆâÂÖ®Á∫ßÂà´ÔºåÊèê‰æõËØ¶ÁªÜÁöÑÈ£éÈô©Ë≠¶ÂëäÂíåÈò≤Êä§Âª∫ËÆÆÔºåÂ∏ÆÂä©ÂºÄÂèëËÄÖËØÜÂà´ÊΩúÂú®Â®ÅËÉÅ„ÄÇ</p>
                </div>
                <div class="feature-item">
                    <h4>üéØ ÂÆûÊàòÂú∫ÊôØÊ®°Êãü</h4>
                    <p>ÁªìÂêàÁúüÂÆûÂºÄÂèëÂú∫ÊôØÔºå‰ªéÂü∫Á°ÄÂà∞È´òÁ∫ßÈÄêÊ≠•Ê∑±ÂÖ•ÔºåÈÄÇÂêà‰∏çÂêåÊ∞¥Âπ≥ÁöÑÂºÄÂèëËÄÖÂ≠¶‰π†‰ΩøÁî®„ÄÇ</p>
                </div>
            </div>
        </div>
        
        <div id="result" style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; display: none;">
            <h3>ÊºîÁ§∫ÁªìÊûú</h3>
            <div id="resultTabs" style="margin-bottom: 15px; display: none;">
                <button class="result-tab active" onclick="showResultTab('summary')">üìä ÊÄªËßà</button>
                <button class="result-tab" onclick="showResultTab('steps')">üìù ÊïôËÇ≤Ê≠•È™§</button>
                <button class="result-tab" onclick="showResultTab('trace')">üîç ÊâßË°åËøΩË∏™</button>
                <button class="result-tab" onclick="showResultTab('security')">üõ°Ô∏è ÂÆâÂÖ®ÂàÜÊûê</button>
            </div>
            <div id="resultContent-summary" class="result-content active">
                <pre id="resultSummary" style="background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; overflow-x: auto;"></pre>
            </div>
            <div id="resultContent-steps" class="result-content">
                <div id="educationSteps" style="background: #fff; padding: 15px; border-radius: 5px; border-left: 4px solid #3498db;"></div>
            </div>
            <div id="resultContent-trace" class="result-content">
                <pre id="traceDetails" style="background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; overflow-x: auto; font-size: 12px;"></pre>
            </div>
            <div id="resultContent-security" class="result-content">
                <div id="securityAnalysis" style="background: #fff; padding: 15px; border-radius: 5px;"></div>
            </div>
        </div>
    </div>
    
    <script>
        async function runDemo(type) {
            const resultDiv = document.getElementById('result');
            const resultTabs = document.getElementById('resultTabs');
            const resultSummary = document.getElementById('resultSummary');
            
            resultDiv.style.display = 'block';
            resultTabs.style.display = 'block';
            resultSummary.textContent = 'Ê≠£Âú®ËøêË°åÊºîÁ§∫...';
            
            // ÊòæÁ§∫ÊÄªËßàÊ†áÁ≠æÈ°µ
            showResultTab('summary');
            
            try {
                const response = await fetch(`/api/demo/trace/${type}`);
                const result = await response.json();
                
                // Êõ¥Êñ∞ÊÄªËßà
                resultSummary.textContent = JSON.stringify(result, null, 2);
                
                // Êõ¥Êñ∞ÊïôËÇ≤Ê≠•È™§
                updateEducationSteps(result);
                
                // Êõ¥Êñ∞ÊâßË°åËøΩË∏™
                updateTraceDetails(result);
                
                // Êõ¥Êñ∞ÂÆâÂÖ®ÂàÜÊûê
                updateSecurityAnalysis(result);
                
            } catch (error) {
                resultSummary.textContent = 'ÊºîÁ§∫ËøêË°åÂ§±Ë¥•: ' + error.message;
                resultTabs.style.display = 'none';
            }
        }
        
        function updateEducationSteps(result) {
            const stepsDiv = document.getElementById('educationSteps');
            
            if (result.educationLog) {
                const steps = result.educationLog.split('\\n').filter(step => step.trim());
                let html = '<h4>üìö ÊïôËÇ≤Ê≠•È™§ËØ¶Ëß£</h4>';
                
                steps.forEach((step, index) => {
                    if (step.trim()) {
                        let stepClass = 'education-step';
                        if (step.includes('[Âç±Èô©]') || step.includes('[Ë≠¶Âëä]')) {
                            stepClass += ' security-warning';
                        } else if (step.includes('[ÊàêÂäü]') || step.includes('[ÂÆåÊàê]')) {
                            stepClass += ' security-safe';
                        }
                        html += `<div class="${stepClass}"><strong>Ê≠•È™§ ${index + 1}:</strong> ${step}</div>`;
                    }
                });
                
                if (result.educationalPoints) {
                    html += '<h5>üéØ ÂÖ≥ÈîÆÊïôËÇ≤Ë¶ÅÁÇπ:</h5><ul>';
                    result.educationalPoints.forEach(point => {
                        html += `<li>${point}</li>`;
                    });
                    html += '</ul>';
                }
                
                stepsDiv.innerHTML = html;
            } else {
                stepsDiv.innerHTML = '<p>Ê≠§ÊºîÁ§∫Á±ªÂûãÊöÇ‰∏çÊîØÊåÅËØ¶ÁªÜÊïôËÇ≤Ê≠•È™§Â±ïÁ§∫</p>';
            }
        }
        
        function updateTraceDetails(result) {
            const traceDiv = document.getElementById('traceDetails');
            
            if (result.fullTrace) {
                traceDiv.textContent = result.fullTrace;
            } else {
                traceDiv.textContent = 'ÊöÇÊó†ËØ¶ÁªÜËøΩË∏™‰ø°ÊÅØ';
            }
        }
        
        function updateSecurityAnalysis(result) {
            const securityDiv = document.getElementById('securityAnalysis');
            
            let html = '<h4>üõ°Ô∏è ÂÆâÂÖ®ÂàÜÊûêÊä•Âëä</h4>';
            
            // ÂÆâÂÖ®Á∫ßÂà´
            if (result.securityLevel) {
                let levelClass = 'security-safe';
                let levelText = 'ÂÆâÂÖ®';
                let levelIcon = 'üü¢';
                
                switch (result.securityLevel) {
                    case 'HIGH_RISK':
                    case 'CRITICAL':
                        levelClass = 'security-warning';
                        levelText = 'È´òÈ£éÈô©';
                        levelIcon = 'üî¥';
                        break;
                    case 'MEDIUM_RISK':
                        levelClass = 'security-medium';
                        levelText = '‰∏≠Á≠âÈ£éÈô©';
                        levelIcon = 'üü°';
                        break;
                }
                
                html += `<div class="${levelClass}">
                    <strong>${levelIcon} ÂÆâÂÖ®Á∫ßÂà´: ${levelText}</strong>
                    <p>Á±ªÂûã: ${result.type || 'Êú™Áü•'} | Âú∫ÊôØ: ${result.scenario || 'basic'}</p>
                </div>`;
            }
            
            // Á±ªÂûãÁâπÂÆöÁöÑÂàÜÊûê
            if (result.type === 'spring') {
                html += generateSpringSecurityAnalysis(result);
            } else if (result.type === 'jvm') {
                html += generateJVMSecurityAnalysis(result);
            }
            
            // ÂÆâÂÖ®Ë≠¶Âëä
            if (result.securityWarnings && result.securityWarnings.length > 0) {
                html += '<h5>‚ö†Ô∏è ÂÆâÂÖ®Ë≠¶Âëä:</h5><ul>';
                result.securityWarnings.forEach(warning => {
                    html += `<li class="text-danger">${warning}</li>`;
                });
                html += '</ul>';
            }
            
            // ÊîªÂáªÂêëÈáè
            if (result.attackVector) {
                html += `<div class="security-warning">
                    <strong>üéØ ÊîªÂáªÂêëÈáè:</strong> ${result.attackVector}
                </div>`;
            }
            
            // ÁªüËÆ°‰ø°ÊÅØ
            if (result.statistics || result.analysisTime || result.executionSteps) {
                html += '<h5>üìä ÁªüËÆ°‰ø°ÊÅØ:</h5>';
                html += '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">';
                
                if (result.educationalSteps) {
                    html += `<div class="stat-item">
                        <div class="stat-value">${result.educationalSteps}</div>
                        <div class="stat-label">ÊïôËÇ≤Ê≠•È™§</div>
                    </div>`;
                }
                
                if (result.executionSteps || result.traceSteps) {
                    html += `<div class="stat-item">
                        <div class="stat-value">${result.executionSteps || result.traceSteps}</div>
                        <div class="stat-label">ÊâßË°åÊ≠•È™§</div>
                    </div>`;
                }
                
                if (result.analysisTime || result.processingTime) {
                    html += `<div class="stat-item">
                        <div class="stat-value">${result.analysisTime || result.processingTime}ms</div>
                        <div class="stat-label">Â§ÑÁêÜÊó∂Èó¥</div>
                    </div>`;
                }
                
                if (result.beanCount) {
                    html += `<div class="stat-item">
                        <div class="stat-value">${result.beanCount}</div>
                        <div class="stat-label">BeanÊï∞Èáè</div>
                    </div>`;
                }
                
                if (result.executionFrames) {
                    html += `<div class="stat-item">
                        <div class="stat-value">${result.executionFrames}</div>
                        <div class="stat-label">ÊâßË°åÂ∏ßÊï∞</div>
                    </div>`;
                }
                
                html += '</div>';
            }
            
            // ÊºèÊ¥ûÊó•Âøó
            if (result.vulnerabilityLog) {
                html += '<h5>üö® ÊºèÊ¥ûÊâßË°åÊó•Âøó:</h5>';
                html += `<pre style="background: #2c3e50; color: #ecf0f1; padding: 10px; border-radius: 5px; font-size: 12px;">${result.vulnerabilityLog}</pre>`;
            }
            
            // GadgetÈìæÊó•Âøó
            if (result.gadgetChainLog) {
                html += '<h5>üîó GadgetÈìæÊâßË°åÊó•Âøó:</h5>';
                html += `<pre style="background: #2c3e50; color: #ecf0f1; padding: 10px; border-radius: 5px; font-size: 12px;">${result.gadgetChainLog}</pre>`;
            }
            
            securityDiv.innerHTML = html;
        }
        
        function generateSpringSecurityAnalysis(result) {
            let html = '<h5>üå± SpringÊ°ÜÊû∂ÂàÜÊûê:</h5>';
            
            if (result.springContextActive) {
                html += `<div class="security-safe">
                    <strong>‚úÖ Spring‰∏ä‰∏ãÊñáÁä∂ÊÄÅ:</strong> ${result.springContextActive ? 'Â∑≤ÊøÄÊ¥ª' : 'Êú™ÊøÄÊ¥ª'}
                </div>`;
            }
            
            if (result.beanCount) {
                html += `<p><strong>BeanÁÆ°ÁêÜ:</strong> ÂÖ±ÂàõÂª∫ ${result.beanCount} ‰∏™BeanÂÆû‰æã</p>`;
            }
            
            return html;
        }
        
        function generateJVMSecurityAnalysis(result) {
            let html = '<h5>‚öôÔ∏è JVMÂ±ÇÈù¢ÂàÜÊûê:</h5>';
            
            if (result.memoryUsage) {
                html += '<div class="security-safe">';
                html += '<strong>üíæ ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ:</strong>';
                html += `<pre style="background: #f8f9fa; padding: 10px; margin: 5px 0; font-size: 12px;">${JSON.stringify(result.memoryUsage, null, 2)}</pre>`;
                html += '</div>';
            }
            
            if (result.performanceMetrics) {
                html += '<div class="security-medium">';
                html += '<strong>üìà ÊÄßËÉΩÊåáÊ†á:</strong>';
                html += `<pre style="background: #f8f9fa; padding: 10px; margin: 5px 0; font-size: 12px;">${JSON.stringify(result.performanceMetrics, null, 2)}</pre>`;
                html += '</div>';
            }
            
            return html;
        }
        
        function showResultTab(tabName) {
            // ÈöêËóèÊâÄÊúâÂÜÖÂÆπ
            document.querySelectorAll('.result-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // ÁßªÈô§ÊâÄÊúâÊ†áÁ≠æÈ°µÁöÑÊ¥ªË∑ÉÁä∂ÊÄÅ
            document.querySelectorAll('.result-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // ÊòæÁ§∫ÈÄâ‰∏≠ÁöÑÂÜÖÂÆπ
            const targetContent = document.getElementById(`resultContent-${tabName}`);
            if (targetContent) {
                targetContent.classList.add('active');
            }
            
            // ÊøÄÊ¥ªÈÄâ‰∏≠ÁöÑÊ†áÁ≠æÈ°µ
            event.target.classList.add('active');
        }
        
        function showTrace(type) {
            runDemo(type);
        }
        
        async function testMemshell(type) {
            const resultDiv = document.getElementById('result');
            const resultSummary = document.getElementById('resultSummary');
            
            // Áõ¥Êé•ÊâìÂºÄÂØπÂ∫îÁ±ªÂûãÁöÑÂÜÖÂ≠òÈ©¨È°µÈù¢
            let shellUrl;
            switch(type) {
                case 'servlet':
                    shellUrl = '/memshell/servlet/';
                    break;
                case 'filter':
                    shellUrl = '/?filterCmd=whoami';
                    break;
                case 'listener':
                    shellUrl = '/api/demo/listener-shell?action=info';
                    break;
                default:
                    shellUrl = null;
            }
            
            // Á´ãÂç≥ÊâìÂºÄÊñ∞Á™óÂè£
            if (shellUrl) {
                window.open(shellUrl, '_blank');
            }
            
            // ÊòæÁ§∫ÁªìÊûúÂå∫Âüü
            if (resultDiv && resultSummary) {
                resultDiv.style.display = 'block';
                resultSummary.textContent = `Ê≠£Âú®ÊµãËØï ${type} ÂÜÖÂ≠òÈ©¨...`;
                
                try {
                    const response = await fetch(`/api/demo/trace/${type}`);
                    const result = await response.json();
                    
                    let displayText = `${type.toUpperCase()} ÂÜÖÂ≠òÈ©¨ÊµãËØïÁªìÊûú:\\n\\n`;
                    displayText += `Áä∂ÊÄÅ: ${result.status}\\n`;
                    if (result.status === 'success') {
                        displayText += `ÊâßË°åÊ≠•È™§: ${result.executionSteps}\\n`;
                        displayText += `Ë≠¶ÂëäÊï∞Èáè: ${result.warningCount}\\n`;
                        displayText += `ÈîôËØØÊï∞Èáè: ${result.errorCount}\\n`;
                        displayText += `ÂÆâÂÖ®ËØÑÂàÜ: ${result.securityScore}\\n`;
                        displayText += `È£éÈô©Á∫ßÂà´: ${result.riskLevel}\\n`;
                        displayText += `Âª∫ËÆÆ: ${result.recommendation}\\n`;
                    } else {
                        displayText += `ÈîôËØØ‰ø°ÊÅØ: ${result.message}\\n`;
                    }
                    
                    if (shellUrl) {
                        displayText += `\\n‚úÖ Â∑≤Âú®Êñ∞Á™óÂè£ÊâìÂºÄ ${type} ÂÜÖÂ≠òÈ©¨È°µÈù¢`;
                    }
                    
                    resultSummary.textContent = displayText;
                } catch (error) {
                    let errorText = `${type} ÂÜÖÂ≠òÈ©¨ÊµãËØïÂ§±Ë¥•: ` + error.message;
                    if (shellUrl) {
                        errorText += `\\n\\n‚úÖ ‰ΩÜÂ∑≤ÊàêÂäüÂú®Êñ∞Á™óÂè£ÊâìÂºÄ ${type} ÂÜÖÂ≠òÈ©¨È°µÈù¢`;
                    }
                    resultSummary.textContent = errorText;
                }
            } else {
                // Â¶ÇÊûúÊâæ‰∏çÂà∞ÁªìÊûúÊòæÁ§∫ÂÖÉÁ¥†ÔºåËá≥Â∞ëÁ°Æ‰øùÈ°µÈù¢ËÉΩÊ≠£Â∏∏Ë∑≥ËΩ¨
                if (shellUrl) {
                    alert(`Â∑≤Âú®Êñ∞Á™óÂè£ÊâìÂºÄ ${type} ÂÜÖÂ≠òÈ©¨È°µÈù¢`);
                } else {
                    alert(`Êó†Ê≥ïÊâìÂºÄ ${type} ÂÜÖÂ≠òÈ©¨È°µÈù¢ÔºöURLÈÖçÁΩÆÈîôËØØ`);
                }
            }
        }
    </script>
</body>
</html>
        """;
    }
    
    private String generateSpringVisualizationHTML() {
        return """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpringÊ°ÜÊû∂ÂèçÂ∫èÂàóÂåñÂèØËßÜÂåñ</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', 'SimSun', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .feature-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            border-left: 5px solid #27ae60;
        }
        .status {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 5px;
        }
        .back-link:hover {
            background: #2980b9;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üå± SpringÊ°ÜÊû∂ÂèçÂ∫èÂàóÂåñÂèØËßÜÂåñ</h1>
        
        <div class="status">
            üìã SpringÂèØËßÜÂåñÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠ÔºåÊï¨ËØ∑ÊúüÂæÖÔºÅ
        </div>
        
        <div class="feature-card">
            <h3>üîç ËÆ°ÂàíÂäüËÉΩ</h3>
            <ul>
                <li>Spring BeanÁîüÂëΩÂë®ÊúüÂèØËßÜÂåñ</li>
                <li>AOP‰ª£ÁêÜÂØπË±°ÂàõÂª∫ËøáÁ®ãËøΩË∏™</li>
                <li>‰æùËµñÊ≥®ÂÖ•ÊµÅÁ®ãÂàÜÊûê</li>
                <li>Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÈÄªËæëÂ±ïÁ§∫</li>
                <li>Spring‰∏ä‰∏ãÊñáÂàùÂßãÂåñËøáÁ®ã</li>
            </ul>
        </div>
        
        <div class="feature-card">
            <h3>üéØ ÊäÄÊúØË¶ÅÁÇπ</h3>
            <ul>
                <li>BeanÂÆû‰æãÂåñ‰∏éÂ±ûÊÄßÊ≥®ÂÖ•ËøáÁ®ã</li>
                <li>BeanPostProcessorÊâßË°åÊó∂Êú∫</li>
                <li>Âæ™ÁéØ‰æùËµñËß£ÂÜ≥Êú∫Âà∂</li>
                <li>‰ª£ÁêÜÂØπË±°ÁöÑÂ∫èÂàóÂåñÂ§ÑÁêÜ</li>
                <li>ApplicationContextÁîüÂëΩÂë®Êúü</li>
            </ul>
        </div>
        
        <a href="/api/demo/" class="back-link">‚Üê ËøîÂõûÊºîÁ§∫‰∏ªÈ°µ</a>
    </div>
</body>
</html>
        """;
    }
    
    private String generateJVMVisualizationHTML() {
        return """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JVMÊâßË°åÊµÅÁ®ãÂèØËßÜÂåñ</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', 'SimSun', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .feature-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            border-left: 5px solid #e74c3c;
        }
        .status {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 5px;
        }
        .back-link:hover {
            background: #2980b9;
        }
        .highlight {
            background: #e8f5e8;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚öôÔ∏è JVMÊâßË°åÊµÅÁ®ãÂèØËßÜÂåñ</h1>
        
        <div class="status">
            üîß JVMÂèØËßÜÂåñÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠ÔºåÊï¨ËØ∑ÊúüÂæÖÔºÅ
        </div>
        
        <div class="feature-card">
            <h3>üéØ Ê†∏ÂøÉÂäüËÉΩ</h3>
            <ul>
                <li>Â≠óËäÇÁ†ÅÊâßË°åËøáÁ®ãÂèØËßÜÂåñ</li>
                <li>ÂØπË±°ÂàõÂª∫‰∏éÂÜÖÂ≠òÂàÜÈÖçËøΩË∏™</li>
                <li>ÊñπÊ≥ïË∞ÉÁî®Ê†àÂàÜÊûê</li>
                <li>ÂèçÂ∞ÑÊìç‰ΩúËØ¶ÁªÜÂ±ïÁ§∫</li>
                <li>Á±ªÂä†ËΩΩËøáÁ®ãÁõëÊéß</li>
            </ul>
        </div>
        
        <div class="feature-card">
            <h3>üîç ÊäÄÊúØÁªÜËäÇ</h3>
            <ul>
                <li>Â†ÜÂÜÖÂ≠òÂØπË±°ÂàÜÂ∏ÉÂõæ</li>
                <li>ÊñπÊ≥ïÂå∫Á±ª‰ø°ÊÅØÂ±ïÁ§∫</li>
                <li>ËôöÊãüÊú∫Ê†àÂ∏ßÁªìÊûÑÂàÜÊûê</li>
                <li>ÂûÉÂúæÂõûÊî∂ËøáÁ®ãËøΩË∏™</li>
                <li>JITÁºñËØë‰ºòÂåñÂ±ïÁ§∫</li>
            </ul>
        </div>
        
        <div class="highlight">
            <h4>üí° Âç≥Â∞ÜÊîØÊåÅÁöÑÂèØËßÜÂåñÂÜÖÂÆπÔºö</h4>
            <p>‚Ä¢ ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÁöÑÂØπË±°ÂàõÂª∫Êó∂Â∫èÂõæ</p>
            <p>‚Ä¢ ÊñπÊ≥ïË∞ÉÁî®ÈìæÁöÑÊ∑±Â∫¶ÂàÜÊûê</p>
            <p>‚Ä¢ ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµÁöÑÂÆûÊó∂ÁõëÊéß</p>
            <p>‚Ä¢ ÂÆâÂÖ®Ê£ÄÊü•ÁÇπÁöÑÊâßË°åÁä∂ÊÄÅ</p>
        </div>
        
        <a href="/api/demo/" class="back-link">‚Üê ËøîÂõûÊºîÁ§∫‰∏ªÈ°µ</a>
    </div>
</body>
</html>
        """;
    }
    
    private String generateMemshellVisualizationHTML() {
        return """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÂÜÖÂ≠òÈ©¨ÊîªÈò≤ÂØπÊäóÂèØËßÜÂåñÂπ≥Âè∞</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', 'SimSun', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .header h1 {
            margin: 0;
            color: #2c3e50;
            font-size: 28px;
        }
        
        .header .subtitle {
            color: #7f8c8d;
            font-size: 14px;
            margin-top: 5px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* È°∂ÈÉ®ÊéßÂà∂Ê†è */
        .top-controls {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .type-tabs {
            display: flex;
            gap: 10px;
        }
        
        .tab-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            background: #ecf0f1;
            color: #2c3e50;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .tab-btn.active {
            background: #3498db;
            color: white;
        }
        
        .tab-btn:hover {
            background: #3498db;
            color: white;
        }
        
        .global-actions {
            display: flex;
            gap: 10px;
        }
        
        /* ‰∏ªË¶Å‰∏âÊ†èÂ∏ÉÂ±Ä */
        .main-layout {
            display: grid;
            grid-template-columns: 350px 1fr 320px;
            gap: 20px;
            min-height: 600px;
        }
        
        @media (max-width: 1200px) {
            .main-layout {
                grid-template-columns: 1fr;
                gap: 15px;
            }
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
        }
        
        .panel-header {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #ecf0f1;
        }
        
        /* Â∑¶Ê†è - Ê≥®ÂÖ•ÊéßÂà∂ */
        .inject-panel {
            border-left: 4px solid #e74c3c;
        }
        
        .inject-panel .panel-header {
            color: #e74c3c;
        }
        
        /* ‰∏≠Ê†è - Áä∂ÊÄÅÂ±ïÁ§∫ */
        .status-panel {
            border-left: 4px solid #f39c12;
        }
        
        .status-panel .panel-header {
            color: #f39c12;
        }
        
        /* Âè≥Ê†è - Ê£ÄÊµãÈò≤Êä§ */
        .detect-panel {
            border-left: 4px solid #27ae60;
        }
        
        .detect-panel .panel-header {
            color: #27ae60;
        }
        
        /* ÂÜÖÂ≠òÈ©¨Á±ªÂûãÂç°Áâá */
        .shell-type-card {
            border: 2px solid #ecf0f1;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            transition: all 0.3s;
            background: #fafafa;
        }
        
        .shell-type-card:hover {
            border-color: #3498db;
            box-shadow: 0 2px 8px rgba(52, 152, 219, 0.2);
        }
        
        .shell-type-card.active {
            border-color: #27ae60;
            background: #ecf8f5;
        }
        
        .shell-type-card.error {
            border-color: #e74c3c;
            background: #fdf2f2;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .card-icon {
            font-size: 24px;
            margin-right: 10px;
        }
        
        .card-title {
            font-size: 16px;
            font-weight: bold;
            color: #2c3e50;
            display: flex;
            align-items: center;
        }
        
        .card-status {
            font-size: 12px;
            padding: 2px 8px;
            border-radius: 10px;
            font-weight: bold;
        }
        
        .status-active {
            background: #d5f4e6;
            color: #27ae60;
        }
        
        .status-inactive {
            background: #fadbd8;
            color: #e74c3c;
        }
        
        .status-unknown {
            background: #fdf2e9;
            color: #f39c12;
        }
        
        .card-info {
            font-size: 13px;
            color: #7f8c8d;
            margin: 8px 0;
            line-height: 1.4;
        }
        
        .card-actions {
            display: flex;
            gap: 8px;
            margin-top: 12px;
            flex-wrap: wrap;
        }
        
        /* ÊåâÈíÆÊ†∑Âºè */
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 13px;
            font-weight: bold;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .btn-inject {
            background: #e74c3c;
            color: white;
        }
        
        .btn-inject:hover {
            background: #c0392b;
        }
        
        .btn-remove {
            background: #f39c12;
            color: white;
        }
        
        .btn-remove:hover {
            background: #d68910;
        }
        
        .btn-detect {
            background: #27ae60;
            color: white;
        }
        
        .btn-detect:hover {
            background: #219a52;
        }
        
        .btn-info {
            background: #3498db;
            color: white;
        }
        
        .btn-info:hover {
            background: #2980b9;
        }
        
        .btn-secondary {
            background: #95a5a6;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #7f8c8d;
        }
        
        /* ÁªüËÆ°Èù¢Êùø */
        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }
        
        .stat-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            border: 2px solid #e9ecef;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 12px;
            color: #7f8c8d;
            text-transform: uppercase;
        }
        
        /* ÂÜÖÂ≠òÈ©¨ÂàóË°® */
        .shell-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .shell-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 12px;
            margin: 10px 0;
            transition: all 0.3s;
        }
        
        .shell-item:hover {
            border-color: #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .shell-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .shell-name {
            font-weight: bold;
            color: #2c3e50;
        }
        
        .shell-type {
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 10px;
            background: #3498db;
            color: white;
        }
        
        .shell-details {
            font-size: 12px;
            color: #7f8c8d;
            line-height: 1.4;
        }
        
        /* ÁªìÊûúËæìÂá∫Âå∫Âüü */
        .result-area {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            min-height: 200px;
            max-height: 300px;
            overflow-y: auto;
            margin: 15px 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        
        /* Âä†ËΩΩÂä®Áîª */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        .loading::before {
            content: "‚è≥";
            margin-right: 8px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Ë≠¶ÂëäÊèêÁ§∫ */
        .warning {
            background: #fff3cd;
            color: #856404;
            padding: 12px;
            border-radius: 5px;
            border-left: 4px solid #ffc107;
            margin: 15px 0;
            font-size: 14px;
        }
        
        .warning strong {
            display: block;
            margin-bottom: 5px;
        }
        
        /* ÊàêÂäüÊèêÁ§∫ */
        .success {
            background: #d1ecf1;
            color: #0c5460;
            padding: 12px;
            border-radius: 5px;
            border-left: 4px solid #bee5eb;
            margin: 15px 0;
            font-size: 14px;
        }
        
        /* ÈîôËØØÊèêÁ§∫ */
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 12px;
            border-radius: 5px;
            border-left: 4px solid #f5c6cb;
            margin: 15px 0;
            font-size: 14px;
        }
        /* ÁªìÊûúËæìÂá∫Âå∫Âüü */
        .result-panel {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            max-height: 400px;
            overflow-y: auto;
            display: none;
        }
        
        .shell-list {
            margin: 15px 0;
        }
        
        .shell-item {
            background: white;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            border-left: 4px solid #95a5a6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .shell-item.active {
            border-left-color: #27ae60;
            background: #d5f4e6;
        }
        
        .shell-item.suspicious {
            border-left-color: #e74c3c;
            background: #fadbd8;
        }
        
        .shell-info {
            flex-grow: 1;
        }
        
        .shell-actions {
            display: flex;
            gap: 10px;
        }
        
        .input-group {
            margin: 15px 0;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .input-group select, .input-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #bdc3c7;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .back-link {
            display: inline-block;
            margin-top: 30px;
            padding: 12px 25px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
        }
        
        .back-link:hover {
            background: #2980b9;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }
        
        .stat-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            border: 1px solid #e9ecef;
            margin: 5px;
        }
        
        .stat-value {
            font-size: 20px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 3px;
        }
        
        .stat-label {
            font-size: 11px;
            color: #7f8c8d;
            text-transform: uppercase;
        }
    </style>
</head>
<body>
    <!-- È°µÈù¢Â§¥ÈÉ® -->
    <div class="header">
        <h1>‚öîÔ∏è ÂÜÖÂ≠òÈ©¨ÊîªÈò≤ÂØπÊäóÂèØËßÜÂåñÂπ≥Âè∞</h1>
        <div class="subtitle">Memory Shell Detection & Analysis Visualization Platform</div>
    </div>
    
    <div class="container">
        <!-- È°∂ÈÉ®ÊéßÂà∂Ê†è -->
        <div class="top-controls">
            <div class="type-tabs">
                <button class="tab-btn active" onclick="showAllTypes()">ÂÖ®ÈÉ®</button>
                <button class="tab-btn" onclick="showType('servlet')">Servlet</button>
                <button class="tab-btn" onclick="showType('filter')">Filter</button>
                <button class="tab-btn" onclick="showType('listener')">Listener</button>
            </div>
            <div class="global-actions">
                <button class="btn btn-detect" onclick="detectMemoryShells()">üîç ÂÖ®Èù¢Êâ´Êèè</button>
                <button class="btn btn-info" onclick="refreshStatus()">üîÑ Âà∑Êñ∞Áä∂ÊÄÅ</button>
            </div>
        </div>
        
        <!-- ‰∏ªË¶Å‰∏âÊ†èÂ∏ÉÂ±Ä -->
        <div class="main-layout">
            <!-- Â∑¶Ê†è - ÊîªÂáªÈù¢Êùø -->
            <div class="panel inject-panel">
                <div class="panel-header">üî¥ ÊîªÂáªÊ®°Êãü</div>
                
                <div class="shell-type-card">
                    <div class="card-header">
                        <div class="card-title">
                            <span class="card-icon">üåê</span>
                            ServletÂÜÖÂ≠òÈ©¨
                        </div>
                        <div class="card-status status-inactive" id="servlet-status">Êú™ÊøÄÊ¥ª</div>
                    </div>
                    <div class="card-info">ÈÄöËøáÂä®ÊÄÅÊ≥®ÂÜåServletÂÆûÁé∞ÂëΩ‰ª§ÊâßË°åÂêéÈó®</div>
                    <div class="card-actions">
                        <button class="btn btn-inject" onclick="window.open('http://localhost:8080/shell?action=info&amp;type=servlet', '_blank')">üîç ServletÂÜÖÂ≠òÈ©¨ÊºîÁ§∫</button>
                        <button class="btn btn-remove" onclick="removeShellByType('servlet')">ÁßªÈô§</button>
                        <button class="btn btn-info" onclick="getShellInfo('servlet')">ËØ¶ÊÉÖ</button>
                    </div>
                </div>
                
                <div class="shell-type-card">
                    <div class="card-header">
                        <div class="card-title">
                            <span class="card-icon">üîÑ</span>
                            FilterÂÜÖÂ≠òÈ©¨
                        </div>
                        <div class="card-status status-inactive" id="filter-status">Êú™ÊøÄÊ¥ª</div>
                    </div>
                    <div class="card-info">ÈÄöËøáËøáÊª§Âô®ÈìæÂÆûÁé∞ËØ∑Ê±ÇÊã¶Êà™ÂíåÂëΩ‰ª§ÊâßË°å</div>
                    <div class="card-actions">
                        <button class="btn btn-inject" onclick="window.open('http://localhost:8080/shell?action=info&amp;type=filter', '_blank')">üîÑ FilterÂÜÖÂ≠òÈ©¨ÊºîÁ§∫</button>
                        <button class="btn btn-remove" onclick="removeShellByType('filter')">ÁßªÈô§</button>
                        <button class="btn btn-info" onclick="getShellInfo('filter')">ËØ¶ÊÉÖ</button>
                    </div>
                </div>
                
                <div class="shell-type-card">
                    <div class="card-header">
                        <div class="card-title">
                            <span class="card-icon">üëÇ</span>
                            ListenerÂÜÖÂ≠òÈ©¨
                        </div>
                        <div class="card-status status-inactive" id="listener-status">Êú™ÊøÄÊ¥ª</div>
                    </div>
                    <div class="card-info">ÈÄöËøá‰∫ã‰ª∂ÁõëÂê¨Âô®ÂÆûÁé∞ÊåÅ‰πÖÂåñÂêéÈó®</div>
                    <div class="card-actions">
                        <button class="btn btn-inject" onclick="window.open('http://localhost:8080/api/demo/listener-shell?action=info', '_blank')">üëÇ ListenerÂÜÖÂ≠òÈ©¨ÊºîÁ§∫</button>
                        <button class="btn btn-remove" onclick="removeShellByType('listener')">ÁßªÈô§</button>
                        <button class="btn btn-info" onclick="getShellInfo('listener')">ËØ¶ÊÉÖ</button>
                    </div>
                </div>
            </div>
            
            <!-- ‰∏≠Ê†è - Áä∂ÊÄÅÂ±ïÁ§∫ -->
            <div class="panel status-panel">
                <div class="panel-header">üìä Áä∂ÊÄÅÂ±ïÁ§∫</div>
                
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-value" id="active-shells-count">0</div>
                        <div class="stat-label">Ê¥ªË∑ÉÂÜÖÂ≠òÈ©¨</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="total-injections-count">0</div>
                        <div class="stat-label">Ê≥®ÂÖ•Ê¨°Êï∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="detection-status">ÂÖ≥Èó≠</div>
                        <div class="stat-label">ÂÆûÊó∂Ê£ÄÊµã</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="suspicious-count">0</div>
                        <div class="stat-label">ÂèØÁñëÁªÑ‰ª∂</div>
                    </div>
                </div>
                
                <div class="shell-list" id="active-shells-list">
                    <div class="loading">ÁÇπÂáªÂà∑Êñ∞Áä∂ÊÄÅÂä†ËΩΩÊï∞ÊçÆ</div>
                </div>
            </div>
            
            <!-- Âè≥Ê†è - Ê£ÄÊµãÈò≤Êä§ -->
            <div class="panel detect-panel">
                <div class="panel-header">üõ°Ô∏è Ê£ÄÊµãÈò≤Êä§</div>
                
                <h4>Ê£ÄÊµãÊéßÂà∂</h4>
                <button class="btn btn-detect" onclick="detectMemoryShells()">üîç ÊâßË°åÊâ´Êèè</button>
                <button class="btn btn-detect" onclick="startRealTimeDetection()">‚ñ∂Ô∏è ÂêØÂä®ÂÆûÊó∂Ê£ÄÊµã</button>
                <button class="btn btn-secondary" onclick="stopRealTimeDetection()">‚èπÔ∏è ÂÅúÊ≠¢Ê£ÄÊµã</button>
                
                <h4 style="margin-top: 20px;">ÂÜÖÂ≠òÈ©¨ÁÆ°ÁêÜ</h4>
                <button class="btn btn-info" onclick="listActiveShells()">üìã ÂàóÂá∫Ê¥ªË∑ÉShell</button>
                <button class="btn btn-remove" onclick="removeAllShells()">üóëÔ∏è Ê∏ÖÈô§ÊâÄÊúâ</button>
                
                <h4 style="margin-top: 20px;">ÂØºÂá∫ÂäüËÉΩ</h4>
                <button class="btn btn-info" onclick="exportReport()">üíæ ÂØºÂá∫Êä•Âëä</button>
                <button class="btn btn-info" onclick="showDetectionHistory()">üìà Ê£ÄÊµãÂéÜÂè≤</button>
            </div>
        </div>
        
        <div class="warning">
            ‚ö†Ô∏è ÂÆâÂÖ®ÊèêÈÜí: Êú¨Âπ≥Âè∞‰ªÖÁî®‰∫éÂÆâÂÖ®ÊïôËÇ≤ÂíåÈò≤Êä§ÂüπËÆ≠ÔºåÊâÄÊúâÂäüËÉΩÂùá‰∏∫ÊïôÂ≠¶ÊºîÁ§∫Áî®ÈÄîÔºåËØ∑ÂãøÁî®‰∫éÈùûÊ≥ïÁî®ÈÄîÔºÅ
        </div>
        
        <!-- ÁªìÊûúÊòæÁ§∫Èù¢Êùø -->
        <div id="result-panel" class="result-panel"></div>
        
        <a href="/api/demo/" class="back-link">‚Üê ËøîÂõûÊºîÁ§∫‰∏ªÈ°µ</a>
    </div>
    
    <script>
        let currentStatus = null;
        
        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéËá™Âä®Âà∑Êñ∞Áä∂ÊÄÅ
        window.addEventListener('load', function() {
            refreshStatus();
        });
        
        // Ê†áÁ≠æÈ°µÂàáÊç¢ÂäüËÉΩ
        function showAllTypes() {
            updateTabActive('ÂÖ®ÈÉ®');
            document.querySelectorAll('.shell-type-card').forEach(card => {
                card.style.display = 'block';
            });
        }
        
        function showType(type) {
            updateTabActive(type);
            document.querySelectorAll('.shell-type-card').forEach(card => {
                if (card.id === type + '-card') {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }
        
        function updateTabActive(activeType) {
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.includes(activeType)) {
                    btn.classList.add('active');
                }
            });
        
        async function refreshStatus() {
            try {
                const response = await fetch('/api/demo/memshell/status');
                currentStatus = await response.json();
                
                if (currentStatus.success) {
                    updateStatusDisplay();
                } else {
                    showResult('Ëé∑ÂèñÁä∂ÊÄÅÂ§±Ë¥•: ' + (currentStatus.error || 'Êú™Áü•ÈîôËØØ'));
                }
            } catch (error) {
                showResult('Âà∑Êñ∞Áä∂ÊÄÅÂ§±Ë¥•: ' + error.message);
            }
        }
        
        function updateStatusDisplay() {
            if (!currentStatus) return;
            
            document.getElementById('active-shells-count').textContent = currentStatus.activeShells.length;
            document.getElementById('total-injections-count').textContent = currentStatus.injectorStatistics.totalInjections;
            document.getElementById('detection-status').textContent = 
                currentStatus.detectorStatistics.realTimeDetectionEnabled ? 'Â∑≤ÂêØÂä®' : 'ÂÖ≥Èó≠';
            document.getElementById('suspicious-count').textContent = currentStatus.detectorStatistics.suspiciousComponents;
            
            // Êõ¥Êñ∞Áä∂ÊÄÅÊåáÁ§∫Âô®
            updateShellStatusIndicators();
        }
        
        function updateShellStatusIndicators() {
            const activeShells = currentStatus.activeShells || [];
            
            // ÈáçÁΩÆÊâÄÊúâÁä∂ÊÄÅ
            ['servlet', 'filter', 'listener'].forEach(type => {
                const statusEl = document.getElementById(type + '-status');
                if (statusEl) {
                    statusEl.textContent = 'Êú™ÊøÄÊ¥ª';
                    statusEl.className = 'card-status status-inactive';
                }
            });
            
            // Êõ¥Êñ∞Ê¥ªË∑ÉÁä∂ÊÄÅ
            activeShells.forEach(shell => {
                const type = shell.type.toLowerCase();
                const statusEl = document.getElementById(type + '-status');
                if (statusEl) {
                    statusEl.textContent = 'Â∑≤ÊøÄÊ¥ª';
                    statusEl.className = 'card-status status-active';
                }
            });
        }
        
        async function injectSpecificShell(type) {
            try {
                showResult(`Ê≠£Âú®Ê≥®ÂÖ• ${type} ÂÜÖÂ≠òÈ©¨...`);
                
                const response = await fetch(`/api/demo/memshell/inject/${type}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                showResult(`${type} ÂÜÖÂ≠òÈ©¨Ê≥®ÂÖ•ÁªìÊûú:\\n${JSON.stringify(result, null, 2)}`);
                
                if (result.success) {
                    setTimeout(refreshStatus, 1000);
                }
            } catch (error) {
                showResult(`Ê≥®ÂÖ• ${type} ÂÜÖÂ≠òÈ©¨Â§±Ë¥•: ` + error.message);
            }
        }
        
        async function removeShellByType(type) {
            if (!currentStatus || currentStatus.activeShells.length === 0) {
                showResult('ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑÂÜÖÂ≠òÈ©¨');
                return;
            }
            
            const shellsOfType = currentStatus.activeShells.filter(shell => 
                shell.type.toLowerCase() === type.toLowerCase()
            );
            
            if (shellsOfType.length === 0) {
                showResult(`Ê≤°ÊúâÊâæÂà∞ ${type} Á±ªÂûãÁöÑÂÜÖÂ≠òÈ©¨`);
                return;
            }
            
            for (const shell of shellsOfType) {
                try {
                    const response = await fetch(`/api/demo/memshell/remove/${shell.id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (result.success) {
                        showResult(`Â∑≤ÁßªÈô§ ${type} ÂÜÖÂ≠òÈ©¨: ${shell.name}`);
                    }
                } catch (error) {
                    showResult(`ÁßªÈô§ ${type} ÂÜÖÂ≠òÈ©¨Â§±Ë¥•: ` + error.message);
                }
            }
            
            setTimeout(refreshStatus, 1000);
        }
        
        async function getShellInfo(type) {
            if (!currentStatus || currentStatus.activeShells.length === 0) {
                showResult('ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑÂÜÖÂ≠òÈ©¨');
                return;
            }
            
            const shellsOfType = currentStatus.activeShells.filter(shell => 
                shell.type.toLowerCase() === type.toLowerCase()
            );
            
            if (shellsOfType.length === 0) {
                showResult(`Ê≤°ÊúâÊâæÂà∞ ${type} Á±ªÂûãÁöÑÂÜÖÂ≠òÈ©¨`);
                return;
            }
            
            let info = `${type.toUpperCase()} ÂÜÖÂ≠òÈ©¨‰ø°ÊÅØ:\\n\\n`;
            shellsOfType.forEach((shell, index) => {
                info += `${index + 1}. ${shell.name}\\n`;
                info += `   ID: ${shell.id}\\n`;
                info += `   Á±ªÂêç: ${shell.className}\\n`;
                info += `   Áä∂ÊÄÅ: ${shell.active ? 'Ê¥ªË∑É' : 'ÈùûÊ¥ªË∑É'}\\n`;
                info += `   Ê≥®ÂÖ•Êó∂Èó¥: ${new Date(shell.injectionTime).toLocaleString()}\\n`;
                info += `   ËÆøÈóÆÊ¨°Êï∞: ${shell.accessCount}\\n\\n`;
            });
            
            showResult(info);
        }
        
        async function detectMemoryShells() {
            showResult('Ê≠£Âú®ÊâßË°åÂÖ®Èù¢Êâ´ÊèèÔºåËØ∑Á®çÂÄô...');
            
            try {
                const response = await fetch('/api/demo/memshell/detect');
                const result = await response.json();
                
                showResult(`Ê£ÄÊµãÁªìÊûú:\\nÊâ´ÊèèÊó∂Èó¥: ${new Date(result.scanTime).toLocaleString()}\\nÊÄªÁªÑ‰ª∂Êï∞: ${result.totalComponents}\\nÂèØÁñëÁªÑ‰ª∂Êï∞: ${result.suspiciousComponents}\\n\\nËØ¶ÁªÜÁªìÊûú:\\n${JSON.stringify(result.results, null, 2)}`);
            } catch (error) {
                showResult('Ê£ÄÊµãÂ§±Ë¥•: ' + error.message);
            }
        }
        
        async function startRealTimeDetection() {
            try {
                const response = await fetch('/api/demo/memshell/detection/start', {
                    method: 'POST'
                });
                const result = await response.json();
                
                showResult(`ÂÆûÊó∂Ê£ÄÊµãÂêØÂä®ÁªìÊûú:\\n${JSON.stringify(result, null, 2)}`);
                setTimeout(refreshStatus, 1000);
            } catch (error) {
                showResult('ÂêØÂä®ÂÆûÊó∂Ê£ÄÊµãÂ§±Ë¥•: ' + error.message);
            }
        }
        
        async function stopRealTimeDetection() {
            try {
                const response = await fetch('/api/demo/memshell/detection/stop', {
                    method: 'POST'
                });
                const result = await response.json();
                
                showResult(`ÂÆûÊó∂Ê£ÄÊµãÂÅúÊ≠¢ÁªìÊûú:\\n${JSON.stringify(result, null, 2)}`);
                setTimeout(refreshStatus, 1000);
            } catch (error) {
                showResult('ÂÅúÊ≠¢ÂÆûÊó∂Ê£ÄÊµãÂ§±Ë¥•: ' + error.message);
            }
        }
        
        function listActiveShells() {
            if (currentStatus && currentStatus.activeShells.length > 0) {
                let shellInfo = 'Ê¥ªË∑ÉÂÜÖÂ≠òÈ©¨ÂàóË°®:\\n\\n';
                currentStatus.activeShells.forEach((shell, index) => {
                    shellInfo += `${index + 1}. ${shell.name} (${shell.type})\\n`;
                    shellInfo += `   ID: ${shell.id}\\n`;
                    shellInfo += `   Á±ªÂêç: ${shell.className}\\n`;
                    shellInfo += `   Áä∂ÊÄÅ: ${shell.active ? 'Ê¥ªË∑É' : 'ÈùûÊ¥ªË∑É'}\\n`;
                    shellInfo += `   ËÆøÈóÆÊ¨°Êï∞: ${shell.accessCount}\\n\\n`;
                });
                showResult(shellInfo);
            } else {
                showResult('ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑÂÜÖÂ≠òÈ©¨');
            }
        }
        
        async function removeAllShells() {
            if (!confirm('Á°ÆÂÆöË¶ÅÁßªÈô§ÊâÄÊúâÂÜÖÂ≠òÈ©¨ÂêóÔºüËøô‰∏™Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºÅ')) {
                return;
            }
            
            if (!currentStatus || currentStatus.activeShells.length === 0) {
                showResult('ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑÂÜÖÂ≠òÈ©¨');
                return;
            }
            
            let removedCount = 0;
            for (const shell of currentStatus.activeShells) {
                try {
                    const response = await fetch(`/api/demo/memshell/remove/${shell.id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (result.success) {
                        removedCount++;
                    }
                } catch (error) {
                    console.error('ÁßªÈô§Â§±Ë¥•:', error);
                }
            }
            
            showResult(`ÊâπÈáèÁßªÈô§ÂÆåÊàêÔºåÂÖ±ÁßªÈô§ ${removedCount} ‰∏™ÂÜÖÂ≠òÈ©¨`);
            setTimeout(refreshStatus, 1000);
        }
        
        function showDetectionHistory() {
            showResult('Ê£ÄÊµãÂéÜÂè≤ÂäüËÉΩÂºÄÂèë‰∏≠ÔºåÊï¨ËØ∑ÊúüÂæÖ...');
        }
        
        function exportReport() {
            if (!currentStatus) {
                showResult('ËØ∑ÂÖàÂà∑Êñ∞Áä∂ÊÄÅËé∑ÂèñÊï∞ÊçÆ');
                return;
            }
            
            const report = {
                timestamp: new Date().toISOString(),
                status: currentStatus,
                exportedBy: 'MemoryShell Visualization Platform'
            };
            
            const blob = new Blob([JSON.stringify(report, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'memshell-report-' + new Date().getTime() + '.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showResult('Ê£ÄÊµãÊä•ÂëäÂ∑≤ÂØºÂá∫');
        }
        
        function showResult(message) {
            const panel = document.getElementById('result-panel');
            panel.textContent = message;
            panel.style.display = 'block';
            panel.scrollIntoView({behavior: 'smooth'});
        }
        
        // ÊØè30ÁßíËá™Âä®Âà∑Êñ∞Áä∂ÊÄÅ
        setInterval(() => {
            if (document.visibilityState === 'visible') {
                refreshStatus();
            }
        }, 30000);
    </script>
</body>
</html>
        """;
    }
    
    
    private String escapeJson(String str) {
        if (str == null) return "";
        return str.replace("\\", "\\\\")
                 .replace("\"", "\\\"")
                 .replace("\n", "\\n")
                 .replace("\r", "\\r")
                 .replace("\t", "\\t");
    }
    
    // ÁÆÄÂçïÁöÑÊºîÁ§∫ÂØπË±°
    public static class DemoObject implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private String name;
        private int value;
        
        public DemoObject(String name, int value) {
            this.name = name;
            this.value = value;
        }
        
        @Override
        public String toString() {
            return "DemoObject{name='" + name + "', value=" + value + "}";
        }
        
        // Ëá™ÂÆö‰πâÂèçÂ∫èÂàóÂåñÊñπÊ≥ïÁî®‰∫éÊºîÁ§∫
        private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
            System.out.println("DemoObject.readObject() Ë¢´Ë∞ÉÁî®");
            stream.defaultReadObject();
            System.out.println("DemoObject ÂèçÂ∫èÂàóÂåñÂÆåÊàê: " + this);
        }
        
        // Getters
        public String getName() { return name; }
        public int getValue() { return value; }
    }
    
    /**
     * ÊïôËÇ≤Áî®ÊºèÊ¥ûÊºîÁ§∫Á±ª - Â±ïÁ§∫Âç±Èô©ÁöÑreadObjectÊñπÊ≥ï
     */
    public static class VulnerableDemo implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private String command;
        private String description;
        private transient StringBuilder executionLog;
        
        public VulnerableDemo() {
            this.executionLog = new StringBuilder();
        }
        
        public VulnerableDemo(String command, String description) {
            this();
            this.command = command;
            this.description = description;
        }
        
        // Âç±Èô©ÁöÑËá™ÂÆö‰πâÂèçÂ∫èÂàóÂåñÊñπÊ≥ï
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            logStep("üéì [ÊïôËÇ≤] ËøõÂÖ•VulnerableDemo.readObject()ÊñπÊ≥ï");
            logStep("üìñ [ÊïôËÇ≤] ËøôÊòØ‰∏Ä‰∏™‰∏çÂÆâÂÖ®ÁöÑÂèçÂ∫èÂàóÂåñÂÆûÁé∞Á§∫‰æã");
            
            // ÊÅ¢Â§çÂØπË±°Â≠óÊÆµ
            in.defaultReadObject();
            logStep("‚úÖ [Ê≠•È™§] Â≠óÊÆµÊÅ¢Â§çÂÆåÊàê - command: " + command);
            
            // ÈáçÊñ∞ÂàùÂßãÂåñtransientÂ≠óÊÆµ
            this.executionLog = new StringBuilder();
            
            // Ê®°ÊãüÂç±Èô©Êìç‰ΩúÔºöÂü∫‰∫éÂèçÂ∫èÂàóÂåñÊï∞ÊçÆÊâßË°åÂëΩ‰ª§
            if (command != null && !command.trim().isEmpty()) {
                logStep("‚ö†Ô∏è  [Âç±Èô©] Ê£ÄÊµãÂà∞ÂëΩ‰ª§ÂèÇÊï∞ÔºåÂáÜÂ§áÊâßË°å: " + command);
                simulateCommandExecution(command);
                logStep("üö® [Ë≠¶Âëä] ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠ÊâßË°å‰∫ÜÂ§ñÈÉ®ÂëΩ‰ª§ÔºÅ");
            }
            
            logStep("üîö [ÊïôËÇ≤] VulnerableDemo.readObject()ÊâßË°åÂÆåÊàê");
        }
        
        private void simulateCommandExecution(String cmd) {
            // ÊïôËÇ≤ÊºîÁ§∫ÔºöÊòæÁ§∫Êú¨Â∫îÊâßË°åÁöÑÂëΩ‰ª§‰ΩÜ‰∏çÁúüÊ≠£ÊâßË°åÂç±Èô©Êìç‰Ωú
            String simulatedResult = "";
            
            switch (cmd.toLowerCase()) {
                case "whoami":
                    simulatedResult = "administrator";
                    break;
                case "pwd":
                    simulatedResult = "/home/user";
                    break;
                case "id":
                    simulatedResult = "uid=0(root) gid=0(root)";
                    break;
                case "ls":
                    simulatedResult = "file1.txt file2.txt directory/";
                    break;
                default:
                    simulatedResult = "ÂëΩ‰ª§ÊâßË°åÊ®°ÊãüÁªìÊûú";
            }
            
            logStep("üíª [Ê®°ÊãüÊâßË°å] " + cmd + " -> " + simulatedResult);
            logStep("üí° [ÊïôËÇ≤ÊèêÁ§∫] Âú®ÁúüÂÆûÊîªÂáª‰∏≠‰ºöË∞ÉÁî®: Runtime.getRuntime().exec(\"" + cmd + "\")");
            logStep("üõ°Ô∏è  [Èò≤Êä§] Ê≠§ÊºîÁ§∫‰ªÖÊ®°ÊãüÔºåÊú™ÊâßË°åÁúüÂÆûÂëΩ‰ª§");
        }
        
        private void logStep(String step) {
            if (executionLog == null) {
                executionLog = new StringBuilder();
            }
            executionLog.append(step).append("\n");
            System.out.println(step);
        }
        
        public String getExecutionLog() {
            return executionLog != null ? executionLog.toString() : "";
        }
        
        // Getters and Setters
        public String getCommand() { return command; }
        public void setCommand(String command) { this.command = command; }
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
        
        @Override
        public String toString() {
            return "VulnerableDemo{command='" + command + "', description='" + description + "'}";
        }
    }
    
    /**
     * Gadget ChainÊºîÁ§∫Á±ª
     */
    public static class GadgetChainDemo implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private String targetMethod;
        private Object[] parameters;
        private transient StringBuilder chainLog;
        
        public GadgetChainDemo(String targetMethod, Object... parameters) {
            this.targetMethod = targetMethod;
            this.parameters = parameters;
            this.chainLog = new StringBuilder();
        }
        
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            logChainStep("üîó [Gadget Chain] ÂºÄÂßãÊâßË°åÊîªÂáªÈìæ");
            
            in.defaultReadObject();
            this.chainLog = new StringBuilder();
            
            logChainStep("üìã [Ê≠•È™§1] ÊÅ¢Â§çÁõÆÊ†áÊñπÊ≥ï: " + targetMethod);
            logChainStep("üìã [Ê≠•È™§2] ÊÅ¢Â§çÂèÇÊï∞Êï∞ÁªÑ: " + java.util.Arrays.toString(parameters));
            
            // Ê®°ÊãüGadget ChainÊâßË°å
            if ("runtime.exec".equals(targetMethod)) {
                logChainStep("üéØ [Ê≠•È™§3] Ê£ÄÊµãÂà∞Runtime.execË∞ÉÁî®Èìæ");
                logChainStep("‚öôÔ∏è  [Ê≠•È™§4] ÊûÑÂª∫Ë∞ÉÁî®Èìæ: Transformer -> InvokerTransformer -> exec");
                simulateGadgetExecution();
            }
            
            logChainStep("‚úÖ [ÂÆåÊàê] Gadget ChainÊâßË°åÂÆåÊàê");
        }
        
        private void simulateGadgetExecution() {
            logChainStep("üîß [Ê®°Êãü] InvokerTransformer.transform()");
            logChainStep("üîß [Ê®°Êãü] Method.invoke() -> Runtime.getRuntime()");
            logChainStep("üîß [Ê®°Êãü] Method.invoke() -> exec(" + parameters[0] + ")");
            logChainStep("üí° [ÊïôËÇ≤] ËøôÂ±ïÁ§∫‰∫ÜCommons CollectionsÁöÑÁªèÂÖ∏ÊîªÂáªÈìæ");
        }
        
        private void logChainStep(String step) {
            if (chainLog == null) {
                chainLog = new StringBuilder();
            }
            chainLog.append(step).append("\n");
            System.out.println(step);
        }
        
        public String getChainLog() {
            return chainLog != null ? chainLog.toString() : "";
        }
    }
    
    private String runServletTraceDemo() {
        try {
            ServletDeserializationTracer tracer = new ServletDeserializationTracer();
            var result = tracer.traceServletDeserialization();
            
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"type\": \"servlet\",\n");
            json.append("  \"executionSteps\": ").append(result.getExecutionSteps().size()).append(",\n");
            json.append("  \"warningCount\": ").append(result.getWarningCount()).append(",\n");
            json.append("  \"errorCount\": ").append(result.getErrorCount()).append(",\n");
            json.append("  \"securityScore\": ").append(result.getSecurityAssessment().getSecurityScore()).append(",\n");
            json.append("  \"riskLevel\": \"").append(result.getSecurityAssessment().getRiskLevel()).append("\",\n");
            json.append("  \"recommendation\": \"").append(escapeJson(result.getSecurityAssessment().getRecommendation())).append("\"\n");
            json.append("}");
            
            return json.toString();
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\"}";
        }
    }
    
    private String runFilterTraceDemo() {
        try {
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"type\": \"filter\",\n");
            json.append("  \"message\": \"FilterËøΩË∏™ÊºîÁ§∫\",\n");
            json.append("  \"executionSteps\": 8,\n");
            json.append("  \"warningCount\": 1,\n");
            json.append("  \"errorCount\": 0,\n");
            json.append("  \"securityScore\": 75,\n");
            json.append("  \"riskLevel\": \"Medium\",\n");
            json.append("  \"recommendation\": \"Âª∫ËÆÆÂä†Âº∫FilterÈìæÁöÑÂÆâÂÖ®Ê£ÄÊü•\"\n");
            json.append("}");
            
            return json.toString();
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\"}";
        }
    }
    
    private String runListenerTraceDemo() {
        try {
            StringBuilder json = new StringBuilder();
            json.append("{\n");
            json.append("  \"status\": \"success\",\n");
            json.append("  \"type\": \"listener\",\n");
            json.append("  \"message\": \"ListenerËøΩË∏™ÊºîÁ§∫\",\n");
            json.append("  \"executionSteps\": 6,\n");
            json.append("  \"warningCount\": 2,\n");
            json.append("  \"errorCount\": 0,\n");
            json.append("  \"securityScore\": 80,\n");
            json.append("  \"riskLevel\": \"Low\",\n");
            json.append("  \"recommendation\": \"ListenerÊú∫Âà∂Áõ∏ÂØπÂÆâÂÖ®ÔºåÂª∫ËÆÆÂÆöÊúüÊ£ÄÊü•\"\n");
            json.append("}");
            
            return json.toString();
            
        } catch (Exception e) {
            return "{\"status\":\"error\",\"message\":\"" + escapeJson(e.getMessage()) + "\"}";
        }
    }
    
    private String runAllComponentsTraceDemo() {
        return "{\"status\":\"success\",\"type\":\"all_components\",\"message\":\"ÂÖ®ÁªÑ‰ª∂ËøΩË∏™ÊºîÁ§∫\",\"executionSteps\":25,\"warningCount\":4,\"errorCount\":1,\"securityScore\":65,\"riskLevel\":\"High\",\"recommendation\":\"ÂèëÁé∞Â§ö‰∏™ÂÆâÂÖ®È£éÈô©ÁÇπÔºåÂª∫ËÆÆÁ´ãÂç≥Âä†Âº∫Èò≤Êä§\"}";
    }
    
    private String generateListenerShellHTML(String action) {
        String html = "<!DOCTYPE html>\n" +
            "<html lang=\"zh-CN\">\n" +
            "<head>\n" +
            "    <meta charset=\"UTF-8\">\n" +
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
            "    <title>ÂÜÖÂ≠òÈ©¨ÊºîÁ§∫ - Listener</title>\n" +
            "    <style>\n" +
            "        body {\n" +
            "            font-family: Arial, sans-serif;\n" +
            "            margin: 40px;\n" +
            "            background-color: #f5f5f5;\n" +
            "        }\n" +
            "        .warning {\n" +
            "            color: red;\n" +
            "            font-weight: bold;\n" +
            "            border: 2px solid red;\n" +
            "            padding: 10px;\n" +
            "            margin: 20px 0;\n" +
            "            background-color: #ffe6e6;\n" +
            "        }\n" +
            "        .info {\n" +
            "            background: #e6f3ff;\n" +
            "            padding: 15px;\n" +
            "            margin: 10px 0;\n" +
            "            border-left: 4px solid #007acc;\n" +
            "        }\n" +
            "        .success {\n" +
            "            background: #e6ffe6;\n" +
            "            padding: 15px;\n" +
            "            margin: 10px 0;\n" +
            "            border-left: 4px solid #00cc00;\n" +
            "        }\n" +
            "        input[type=text] {\n" +
            "            width: 500px;\n" +
            "            padding: 5px;\n" +
            "        }\n" +
            "        input[type=submit], .btn {\n" +
            "            padding: 8px 15px;\n" +
            "            margin: 5px;\n" +
            "            background-color: #007acc;\n" +
            "            color: white;\n" +
            "            border: none;\n" +
            "            cursor: pointer;\n" +
            "        }\n" +
            "        .btn-danger {\n" +
            "            background-color: #dc3545;\n" +
            "        }\n" +
            "        .log-area {\n" +
            "            background: #2d3748;\n" +
            "            color: #e2e8f0;\n" +
            "            padding: 15px;\n" +
            "            font-family: 'Courier New', monospace;\n" +
            "            font-size: 12px;\n" +
            "            max-height: 300px;\n" +
            "            overflow-y: auto;\n" +
            "            border-radius: 5px;\n" +
            "            margin: 15px 0;\n" +
            "        }\n" +
            "    </style>\n" +
            "</head>\n" +
            "<body>\n" +
            "    <div class=\"warning\">\n" +
            "        ‚ö†Ô∏è Ë≠¶Âëä: ËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÂÆâÂÖ®ÊïôËÇ≤ÁöÑListenerÂÜÖÂ≠òÈ©¨ÊºîÁ§∫<br>\n" +
            "        Ê≠§ÂäüËÉΩ‰ªÖÁî®‰∫éÂ≠¶‰π†ÂíåÊºîÁ§∫ÁõÆÁöÑÔºåËØ∑ÂãøÁî®‰∫éÈùûÊ≥ïÁî®ÈÄîÔºÅ\n" +
            "    </div>\n" +
            "    \n" +
            "    <h1>üëÇ ListenerÂÜÖÂ≠òÈ©¨ÊºîÁ§∫</h1>\n" +
            "    \n" +
            "    <div class=\"info\">\n" +
            "        <h3>ListenerÂÜÖÂ≠òÈ©¨‰ø°ÊÅØ:</h3>\n" +
            "        ÂêçÁß∞: DemoMemoryListener<br>\n" +
            "        Á±ªÂûã: LISTENER<br>\n" +
            "        ÁõëÂê¨Âô®Á±ªÂûã: ServletContext, HttpSession, ServletRequest<br>\n" +
            "        Áä∂ÊÄÅ: Ê¥ªË∑É<br>\n" +
            "        ÊèèËø∞: ÁõëÂê¨ÊâÄÊúâWebÂ∫îÁî®‰∫ã‰ª∂ÔºåÊî∂ÈõÜÁ≥ªÁªü‰ø°ÊÅØ\n" +
            "    </div>\n" +
            "    \n";
            
        // Ê†πÊçÆactionÂèÇÊï∞ÂÜ≥ÂÆöÊòØÂê¶Ê∑ªÂä†ËØ¶ÁªÜ‰ø°ÊÅØ
        if (action != null && "info".equals(action)) {
            html += "    <div class=\"success\">\n" +
                "        <h3>ËØ¶ÁªÜ‰ø°ÊÅØ:</h3>\n" +
                "        ‚Ä¢ ÁõëÂê¨ServletContextÁîüÂëΩÂë®Êúü‰∫ã‰ª∂<br>\n" +
                "        ‚Ä¢ ÁõëÂê¨HttpSessionÂàõÂª∫ÂíåÈîÄÊØÅ<br>\n" +
                "        ‚Ä¢ ÁõëÂê¨ServletRequestÁöÑÂàõÂª∫ÂíåÈîÄÊØÅ<br>\n" +
                "        ‚Ä¢ Êî∂ÈõÜËÆøÈóÆËÄÖ‰ø°ÊÅØÂíåÁ≥ªÁªüÁä∂ÊÄÅ<br>\n" +
                "        ‚Ä¢ ËÆ∞ÂΩïÊâÄÊúâWebÂ∫îÁî®Ê¥ªÂä®Êó•Âøó\n" +
                "    </div>\n" +
                "    \n" +
                "    <div class=\"info\">\n" +
                "        <h3>Êî∂ÈõÜÁöÑ‰ø°ÊÅØÁ±ªÂûã:</h3>\n" +
                "        ‚Ä¢ Áî®Êà∑‰ºöËØù‰ø°ÊÅØ<br>\n" +
                "        ‚Ä¢ ËØ∑Ê±ÇË∑ØÂæÑÂíåÂèÇÊï∞<br>\n" +
                "        ‚Ä¢ ÂÆ¢Êà∑Á´ØIPÂú∞ÂùÄ<br>\n" +
                "        ‚Ä¢ ÊµèËßàÂô®‰ø°ÊÅØ<br>\n" +
                "        ‚Ä¢ Á≥ªÁªüËøêË°åÁä∂ÊÄÅ\n" +
                "    </div>\n" +
                "    \n" +
                "    <h3>‰∫ã‰ª∂Êó•Âøó:</h3>\n" +
                "    <div class=\"log-area\">\n" +
                "    [INFO] ListenerÂÜÖÂ≠òÈ©¨Â∑≤ÊøÄÊ¥ª\n" +
                "    [EVENT] ServletContextÂàùÂßãÂåñÂÆåÊàê\n" +
                "    [EVENT] ÁõëÂê¨Âà∞Êñ∞ÁöÑHTTP‰ºöËØùÂàõÂª∫\n" +
                "    [EVENT] ServletRequest‰∫ã‰ª∂Ëß¶Âèë\n" +
                "    [WARNING] Ê£ÄÊµãÂà∞ÂèØÁñëËÆøÈóÆÊ®°Âºè\n" +
                "    [INFO] Á≥ªÁªüÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÁªßÁª≠ÁõëÂê¨...\n" +
                "    </div>\n";
        }
            
        html += "    \n" +
            "    <div style=\"margin-top: 30px;\">\n" +
            "        <h3>ÂëΩ‰ª§ÊâßË°å (ÈÄöËøáListener‰ª£ÁêÜ):</h3>\n" +
            "        <form onsubmit=\"executeListenerCommand(event)\">\n" +
            "            <input type=\"text\" id=\"listenerCmd\" placeholder=\"ËæìÂÖ•ÂëΩ‰ª§ (Â¶Ç: whoami, pwd, date)\" style=\"width: 500px; padding: 8px;\">\n" +
            "            <input type=\"submit\" value=\"ÊâßË°å\" class=\"btn\">\n" +
            "        </form>\n" +
            "        <div id=\"cmdResult\" style=\"display: none; margin-top: 15px;\">\n" +
            "            <h4>ÊâßË°åÁªìÊûú:</h4>\n" +
            "            <div class=\"log-area\" id=\"cmdOutput\"></div>\n" +
            "        </div>\n" +
            "    </div>\n" +
            "    \n" +
            "    <div style=\"margin-top: 30px;\">\n" +
            "        <h3>Êìç‰ΩúÈÄâÈ°π:</h3>\n" +
            "        <a href=\"/api/demo/listener-shell?action=info\" class=\"btn\">üìä Êü•ÁúãËØ¶ÁªÜ‰ø°ÊÅØ</a>\n" +
            "        <a href=\"#\" class=\"btn btn-danger\" onclick=\"alert('ÊºîÁ§∫ÁéØÂ¢É‰∏≠Êó†Ê≥ïÁúüÊ≠£ÁßªÈô§')\">üóëÔ∏è ÁßªÈô§Listener</a>\n" +
            "        <a href=\"/api/demo/\" class=\"btn\">‚Üê ËøîÂõû‰∏ªÈ°µ</a>\n" +
            "    </div>\n" +
            "    \n" +
            "    <div class=\"info\" style=\"margin-top: 30px;\">\n" +
            "        <h4>üí° ÂÆâÂÖ®ÊèêÁ§∫:</h4>\n" +
            "        ListenerÂûãÂÜÖÂ≠òÈ©¨ÂÖ∑Êúâ‰ª•‰∏ãÁâπÁÇπ:<br>\n" +
            "        ‚Ä¢ ÈöêËîΩÊÄßÂº∫Ôºå‰∏çÁõ¥Êé•Â§ÑÁêÜHTTPËØ∑Ê±Ç<br>\n" +
            "        ‚Ä¢ ÂèØ‰ª•ÁõëÂê¨ÊâÄÊúâWebÂ∫îÁî®‰∫ã‰ª∂<br>\n" +
            "        ‚Ä¢ Èöæ‰ª•ÈÄöËøáÂ∏∏ËßÑÊ£ÄÊµãÊñπÊ≥ïÂèëÁé∞<br>\n" +
            "        ‚Ä¢ Âª∫ËÆÆÂÆöÊúüÊ£ÄÊü•Â∫îÁî®ÁöÑÁõëÂê¨Âô®ÂàóË°®\n" +
            "    </div>\n" +
            "    \n" +
            "    <script>\n" +
            "    async function executeListenerCommand(event) {\n" +
            "        event.preventDefault();\n" +
            "        \n" +
            "        const cmd = document.getElementById('listenerCmd').value.trim();\n" +
            "        const resultDiv = document.getElementById('cmdResult');\n" +
            "        const outputDiv = document.getElementById('cmdOutput');\n" +
            "        \n" +
            "        if (!cmd) {\n" +
            "            alert('ËØ∑ËæìÂÖ•ÂëΩ‰ª§');\n" +
            "            return;\n" +
            "        }\n" +
            "        \n" +
            "        resultDiv.style.display = 'block';\n" +
            "        outputDiv.textContent = 'Ê≠£Âú®ÊâßË°åÂëΩ‰ª§...';\n" +
            "        \n" +
            "        try {\n" +
            "            const response = await fetch('/api/demo/listener-cmd?cmd=' + encodeURIComponent(cmd), {\n" +
            "                method: 'POST'\n" +
            "            });\n" +
            "            const result = await response.json();\n" +
            "            \n" +
            "            if (result.status === 'success') {\n" +
            "                outputDiv.textContent = result.result;\n" +
            "            } else {\n" +
            "                outputDiv.textContent = 'ÈîôËØØ: ' + result.message;\n" +
            "                outputDiv.style.color = '#ff4444';\n" +
            "            }\n" +
            "        } catch (error) {\n" +
            "            outputDiv.textContent = 'ËØ∑Ê±ÇÂ§±Ë¥•: ' + error.message;\n" +
            "            outputDiv.style.color = '#ff4444';\n" +
            "        }\n" +
            "    }\n" +
            "    </script>\n" +
            "</body>\n" +
            "</html>";
            
        return html;
    }
    
    private boolean isAllowedCommand(String command) {
        // ÁßªÈô§ÂëΩ‰ª§ÈôêÂà∂ÔºåÊîØÊåÅÊâÄÊúâÂëΩ‰ª§Áî®‰∫éÊºîÁ§∫
        return true;
    }
    
    private String executeCommand(String command) throws Exception {
        ProcessBuilder pb = new ProcessBuilder();
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            pb.command("cmd", "/c", command);
        } else {
            pb.command("/bin/bash", "-c", command);
        }
        
        Process process = pb.start();
        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));
        StringBuilder result = new StringBuilder();
        String line;
        
        while ((line = reader.readLine()) != null) {
            result.append(line).append("\n");
        }
        
        int exitCode = process.waitFor();
        if (exitCode != 0) {
            java.io.BufferedReader errorReader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getErrorStream()));
            StringBuilder errorResult = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errorResult.append(line).append("\n");
            }
            return "ÂëΩ‰ª§ÊâßË°åÂ§±Ë¥• (ÈÄÄÂá∫Á†Å: " + exitCode + "):\n" + errorResult.toString();
        }
        
        return result.length() > 0 ? result.toString() : "ÂëΩ‰ª§ÊâßË°åÊàêÂäüÔºåÊó†ËæìÂá∫";
    }
    
    // JVMÊºîÁ§∫Áî®ËæÖÂä©Á±ª
    public static class LargeObject implements Serializable {
        private static final long serialVersionUID = 1L;
        private final byte[] data;
        private final String description;
        
        public LargeObject(int size, String description) {
            this.data = new byte[size * 1024]; // KB
            this.description = description;
            Arrays.fill(data, (byte) 0x42);
        }
        
        @Override
        public String toString() {
            return "LargeObject{size=" + (data.length / 1024) + "KB, desc='" + description + "'}";
        }
    }
    
    public static class ComplexObject implements Serializable {
        private static final long serialVersionUID = 1L;
        private String name;
        private boolean enableComplexLogic;
        
        public ComplexObject(String name, boolean enableComplexLogic) {
            this.name = name;
            this.enableComplexLogic = enableComplexLogic;
        }
        
        private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
            stream.defaultReadObject();
            if (enableComplexLogic) {
                performComplexCalculation();
            }
        }
        
        private void performComplexCalculation() {
            // Ê®°ÊãüÂ§çÊùÇËÆ°ÁÆó‰ª•‰∫ßÁîüÂ≠óËäÇÁ†ÅËøΩË∏™
            long result = 1;
            for (int i = 1; i <= 10; i++) {
                result = fibonacci(i);
            }
            System.out.println("[COMPLEX] ËÆ°ÁÆóÁªìÊûú: " + result);
        }
        
        private long fibonacci(int n) {
            if (n <= 1) return n;
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
        
        @Override
        public String toString() {
            return "ComplexObject{name='" + name + "', complex=" + enableComplexLogic + "}";
        }
    }
    
    public static class ReflectiveObject implements Serializable {
        private static final long serialVersionUID = 1L;
        private String message;
        
        public ReflectiveObject(String message) {
            this.message = message;
        }
        
        private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
            stream.defaultReadObject();
            performReflectionOperations();
        }
        
        private void performReflectionOperations() {
            try {
                // ÂèçÂ∞ÑË∞ÉÁî®ÈìæÊºîÁ§∫
                Class<?> clazz = this.getClass();
                Method[] methods = clazz.getDeclaredMethods();
                
                for (Method method : methods) {
                    if ("toString".equals(method.getName())) {
                        method.setAccessible(true);
                        Object result = method.invoke(this);
                        System.out.println("[REFLECTION] Ë∞ÉÁî®ÁªìÊûú: " + result);
                        break;
                    }
                }
            } catch (Exception e) {
                System.err.println("[REFLECTION] ÂèçÂ∞ÑË∞ÉÁî®ÂºÇÂ∏∏: " + e.getMessage());
            }
        }
        
        @Override
        public String toString() {
            return "ReflectiveObject{message='" + message + "'}";
        }
    }
    
    public static class PerformanceObject implements Serializable {
        private static final long serialVersionUID = 1L;
        private int iterations;
        private List<String> data;
        
        public PerformanceObject(int iterations) {
            this.iterations = iterations;
            this.data = new ArrayList<>();
        }
        
        private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
            stream.defaultReadObject();
            performanceIntensiveOperation();
        }
        
        private void performanceIntensiveOperation() {
            long startTime = System.nanoTime();
            
            // CPUÂØÜÈõÜÂûãÊìç‰Ωú
            for (int i = 0; i < iterations; i++) {
                data.add("Performance-" + i + "-" + Math.random());
                
                // Ê®°Êãü‰∏Ä‰∫õËÆ°ÁÆó
                double result = Math.sqrt(i * Math.PI);
                if (result > 0) {
                    data.set(i, data.get(i) + "-" + (int)result);
                }
            }
            
            long endTime = System.nanoTime();
            System.out.println("[PERFORMANCE] Êìç‰ΩúËÄóÊó∂: " + (endTime - startTime) / 1_000_000.0 + "ms");
        }
        
        @Override
        public String toString() {
            return "PerformanceObject{iterations=" + iterations + ", dataSize=" + data.size() + "}";
        }
    }
}
